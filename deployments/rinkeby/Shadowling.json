{
  "address": "0x8F08F7aC4b50D6E2ffD0FF421B6cF04BB31974Fe",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "altar",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ModifyError",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "attributes",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        }
      ],
      "name": "attributesItem",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currencyId",
          "type": "uint256"
        }
      ],
      "name": "modify",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "properties",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "creature",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "flaw",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "origin",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "bloodline",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "ability",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            }
          ],
          "internalType": "struct Attributes.ItemStrings",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "propertiesOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "creature",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "flaw",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "origin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bloodline",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ability",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "name",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "summon",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x99169c5cdbb1203a28aa7becf4030a2a092e489c6c8707a3ce925e5415ed8841",
  "receipt": {
    "to": null,
    "from": "0xD35700A5121d3e5A85Af7e4720ae9C0012530bF7",
    "contractAddress": "0x8F08F7aC4b50D6E2ffD0FF421B6cF04BB31974Fe",
    "transactionIndex": 25,
    "gasUsed": "5291677",
    "logsBloom": "0x00000000000000000000000000040000000000000000000000800000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000020000000000000000000800000000000000000000000000000000400000000000000000000000000000100000000000000000000000000000000000000000000000010000000200000000000000000000000000000000020000000000000000000000000000000000000010000000000000000000000000000020000000000000000000000000000000000000000000000000000000000008000001",
    "blockHash": "0xa3ea35b192eb89a7791718dc130188af7300707775ad464b06b6e692cecc0fd6",
    "transactionHash": "0x99169c5cdbb1203a28aa7becf4030a2a092e489c6c8707a3ce925e5415ed8841",
    "logs": [
      {
        "transactionIndex": 25,
        "blockNumber": 9248854,
        "transactionHash": "0x99169c5cdbb1203a28aa7becf4030a2a092e489c6c8707a3ce925e5415ed8841",
        "address": "0x8F08F7aC4b50D6E2ffD0FF421B6cF04BB31974Fe",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d35700a5121d3e5a85af7e4720ae9c0012530bf7"
        ],
        "data": "0x",
        "logIndex": 28,
        "blockHash": "0xa3ea35b192eb89a7791718dc130188af7300707775ad464b06b6e692cecc0fd6"
      },
      {
        "transactionIndex": 25,
        "blockNumber": 9248854,
        "transactionHash": "0x99169c5cdbb1203a28aa7becf4030a2a092e489c6c8707a3ce925e5415ed8841",
        "address": "0x8F08F7aC4b50D6E2ffD0FF421B6cF04BB31974Fe",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000d35700a5121d3e5a85af7e4720ae9c0012530bf7",
          "0x000000000000000000000000f952441b7997bc229e883988f34d9ebc6c1105bd"
        ],
        "data": "0x",
        "logIndex": 29,
        "blockHash": "0xa3ea35b192eb89a7791718dc130188af7300707775ad464b06b6e692cecc0fd6"
      }
    ],
    "blockNumber": 9248854,
    "cumulativeGasUsed": "9997350",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf952441B7997bC229e883988F34d9eBC6C1105bd"
  ],
  "solcInputHash": "6033effa045c60e762cff4c40681be6f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"altar\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ModifyError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"attributes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"name\":\"attributesItem\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currencyId\",\"type\":\"uint256\"}],\"name\":\"modify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"properties\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"creature\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"flaw\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"origin\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"bloodline\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ability\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct Attributes.ItemStrings\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"propertiesOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"creature\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"flaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"origin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bloodline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ability\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"name\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"summon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"attributes(uint256)\":{\"details\":\"Opensea Standards: https://docs.opensea.io/docs/metadata-standards\"},\"attributesItem(uint256)\":{\"details\":\"Opensea Standards: https://docs.opensea.io/docs/metadata-standards\",\"params\":{\"itemId\":\"A value in propertiesOf[tokenId]\"}},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"claim(uint256,address)\":{\"params\":{\"tokenId\":\"Token with `id` to mint. Maps id to individual item ids in ItemIds\"}},\"contractURI()\":{\"details\":\"Opensea contract metadata: https://docs.opensea.io/docs/contract-level-metadata\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"attributes(uint256)\":{\"notice\":\"Returns the attributes properties of a `tokenId`\"},\"attributesItem(uint256)\":{\"notice\":\"Returns the attributes properties of a single item\"},\"claim(uint256,address)\":{\"notice\":\"Mints Shadowlings to `msg.sender`, cannot mint 0 tokenId\"},\"summon(uint256,address)\":{\"notice\":\"Mints Shadowchain Origin Shadowlings to shadowpakt members, cannot mint 0 tokenId\"},\"tokenURI(uint256)\":{\"notice\":\"Returns an SVG for the provided token id\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Shadowling.sol\":\"Shadowling\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x41dc7bf7f69c668eb98aa078c5140a4d3c3b097124ee4b6058a649ca99688300\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa69205e5009601cf13be78b1e2f500e1e3b1d8012f22d966e63975273f602038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/Shadowling.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"./libraries/metadata/ShadowlingMetadata.sol\\\";\\r\\nimport \\\"./libraries/Random.sol\\\";\\r\\nimport \\\"./libraries/MetadataUtils.sol\\\";\\r\\nimport \\\"./libraries/Currency.sol\\\";\\r\\n\\r\\ncontract Shadowling is ShadowlingMetadata, Ownable, ReentrancyGuard {\\r\\n    /// @notice Mints Shadowlings to `msg.sender`, cannot mint 0 tokenId\\r\\n    /// @param  tokenId Token with `id` to mint. Maps id to individual item ids in ItemIds\\r\\n    function claim(uint256 tokenId, address recipient)\\r\\n        external\\r\\n        nonReentrant\\r\\n        onlyOwner\\r\\n    {\\r\\n        propertiesOf[tokenId] = Attributes.ids(tokenId);\\r\\n        _safeMint(recipient, tokenId);\\r\\n    }\\r\\n\\r\\n    /// @notice Mints Shadowchain Origin Shadowlings to shadowpakt members, cannot mint 0 tokenId\\r\\n    function summon(uint256 tokenId, address recipient)\\r\\n        external\\r\\n        nonReentrant\\r\\n        onlyOwner\\r\\n    {\\r\\n        Attributes.ItemIds memory state = Attributes.ids(tokenId);\\r\\n        state.origin = Attributes.originId(tokenId, true);\\r\\n        propertiesOf[tokenId] = state;\\r\\n        _safeMint(recipient, tokenId);\\r\\n    }\\r\\n\\r\\n    function modify(uint256 tokenId, uint256 currencyId)\\r\\n        external\\r\\n        nonReentrant\\r\\n        onlyOwner\\r\\n    {\\r\\n        Attributes.ItemIds memory cache = propertiesOf[tokenId]; // cache the shadowling props\\r\\n\\r\\n        string memory bloodline = Attributes.encodedIdToString(cache.bloodline);\\r\\n        uint256 startSeed = Random.getBloodSeed(tokenId, bloodline);\\r\\n        string memory sequence = Random.sequence(startSeed);\\r\\n        uint256 seed = uint256(\\r\\n            keccak256(\\r\\n                abi.encodePacked(\\\"MODIFY\\\", toString(currencyId), sequence)\\r\\n            )\\r\\n        );\\r\\n\\r\\n        uint256[4] memory values;\\r\\n        values[0] = cache.creature;\\r\\n        values[1] = cache.flaw;\\r\\n        values[2] = cache.ability;\\r\\n        values[3] = cache.name;\\r\\n\\r\\n        values = Currency.modify(currencyId, values, seed);\\r\\n\\r\\n        cache.creature = values[0] > 0 ? Attributes.creatureId(values[0]) : 0;\\r\\n        cache.flaw = values[1] > 0 ? Attributes.flawId(values[1]) : 0;\\r\\n        cache.ability = values[2] > 0 ? Attributes.abilityId(values[2]) : 0;\\r\\n        cache.name = values[3] > 0 ? Attributes.nameId(values[3]) : 0;\\r\\n\\r\\n        propertiesOf[tokenId] = cache;\\r\\n    }\\r\\n\\r\\n    constructor(address altar) {\\r\\n        transferOwnership(altar);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf143909928b8a2c7a9b0cdf79ff3bedb1db4168f98069f100e4a6d9b289e3a9e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/Currency.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"./Random.sol\\\";\\r\\n\\r\\nlibrary Currency {\\r\\n    uint256 internal constant MOD_FOUR = 2;\\r\\n    uint256 internal constant MOD_TWO = 3;\\r\\n    uint256 internal constant ADD_TWO = 4;\\r\\n    uint256 internal constant ADD_FOUR = 5;\\r\\n    uint256 internal constant REMOVE = 6;\\r\\n    uint256 internal constant AUGMENT_TWO = 7;\\r\\n    uint256 internal constant AUGUMENT_FOUR = 8;\\r\\n    uint256 internal constant MEM_COPY = 9;\\r\\n    uint256 internal constant START_INDEX = 10;\\r\\n\\r\\n    error ModifyError();\\r\\n\\r\\n    /// @return Count of attribute Ids > 0\\r\\n    function amountOf(uint256[4] memory params)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 len = params.length;\\r\\n        uint256 count;\\r\\n        for (uint256 i; i < len; i++) {\\r\\n            uint256 value = params[i];\\r\\n            if (value > 0) count++;\\r\\n        }\\r\\n        return count;\\r\\n    }\\r\\n\\r\\n    function slot(string memory prefix, uint256 seed)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return Random.slot(prefix, seed, 10000);\\r\\n    }\\r\\n\\r\\n    /// @notice Modifies an array of values which are the tokenIds for the attributes\\r\\n    function modify(\\r\\n        uint256 currencyId,\\r\\n        uint256[4] memory params,\\r\\n        uint256 seed\\r\\n    ) internal returns (uint256[4] memory) {\\r\\n        seed = seed % 10000;\\r\\n        uint256 len = params.length;\\r\\n        uint256 count = amountOf(params); // count how many properties are > 0\\r\\n\\r\\n        // adds a property to a one property item\\r\\n        if (currencyId == AUGMENT_TWO) {\\r\\n            if (count != 1) revert ModifyError();\\r\\n            // for each attribute, find the currently set one and modify the one above it\\r\\n            for (uint256 i; i < len; i++) {\\r\\n                uint256 value = params[i];\\r\\n                // if its the last one, set the first slot\\r\\n                if (i == len - 1) params[0] = slot(\\\"SLOT0\\\", seed);\\r\\n                if (value > 0) params[i + 1] = slot(\\\"SLOT1\\\", seed);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // adds a property to a three property item\\r\\n        if (currencyId == AUGUMENT_FOUR) {\\r\\n            if (count != 3) revert ModifyError();\\r\\n            // for each attribute, find the one that is not set, and modify it\\r\\n            for (uint256 i; i < len; i++) {\\r\\n                uint256 value = params[i];\\r\\n                // if its the last one, set the first slot\\r\\n                if (value == 0) params[i] = slot(\\\"SLOT1\\\", seed);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // deletes all properties\\r\\n        if (currencyId == REMOVE) {\\r\\n            // for each attribute, find the one that is set, and set it to 0\\r\\n            for (uint256 i; i < len; i++) {\\r\\n                uint256 value = params[i];\\r\\n                // if its not 0, set it to 0\\r\\n                if (value > 0) params[i] = 0;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // adds up to two properties to a zero property item\\r\\n        if (currencyId == ADD_TWO) {\\r\\n            if (count > 0) revert ModifyError();\\r\\n            if (seed > 5000) params[1] = slot(\\\"SLOT1\\\", seed);\\r\\n            else params[len - 1] = slot(\\\"SLOT2\\\", seed);\\r\\n        }\\r\\n\\r\\n        // adds up to four properties to a zero property item\\r\\n        if (currencyId == ADD_FOUR) {\\r\\n            if (count > 0) revert ModifyError();\\r\\n            for (uint256 i; i < len; i++) {\\r\\n                // if its the last one, set the first slot\\r\\n                if (seed > 9000) params[i] = 0;\\r\\n                else params[i] = slot(\\\"SLOT1\\\", seed);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // modifies up to four properties on a max four property item\\r\\n        if (currencyId == MOD_FOUR) {\\r\\n            if (seed > 9000) params = update(seed, 1);\\r\\n            else if (seed < 500) params = update(seed, 2);\\r\\n            else if (seed < 9000 && seed > 7000) params = update(seed, 3);\\r\\n            else params = update(seed, 4);\\r\\n        }\\r\\n\\r\\n        // modifies up to two properties on a max two property item\\r\\n        if (currencyId == MOD_TWO) {\\r\\n            if (count > 2) revert ModifyError();\\r\\n            if (seed > 5000) params = update(seed, 1);\\r\\n            else params = update(seed, 2);\\r\\n        }\\r\\n\\r\\n        return params;\\r\\n    }\\r\\n\\r\\n    /// @notice Updates an array of values up to `max` using `seed`\\r\\n    function update(uint256 seed, uint256 max)\\r\\n        internal\\r\\n        returns (uint256[4] memory)\\r\\n    {\\r\\n        uint256[4] memory params;\\r\\n        uint256 updated = 1;\\r\\n        params[0] = slot(\\\"SLOT0\\\", seed);\\r\\n        if (updated >= max) return params;\\r\\n        updated++;\\r\\n        params[1] = slot(\\\"SLOT1\\\", seed);\\r\\n        if (updated >= max) return params;\\r\\n        updated++;\\r\\n        params[2] = slot(\\\"SLOT2\\\", seed);\\r\\n        if (updated >= max) return params;\\r\\n        params[3] = slot(\\\"SLOT3\\\", seed);\\r\\n        return params;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x464e906cbe4c2bb8ae6c003d91590a6e1d4dee97a55851b75010f19d9321976f\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/MetadataUtils.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0-or-later\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// Helper for encoding as json w/ trait_type / value from opensea\\r\\nfunction trait(string memory _traitType, string memory _value)\\r\\n    pure\\r\\n    returns (string memory)\\r\\n{\\r\\n    return\\r\\n        string(\\r\\n            abi.encodePacked(\\r\\n                \\\"{\\\",\\r\\n                '\\\"trait_type\\\": \\\"',\\r\\n                _traitType,\\r\\n                '\\\", ',\\r\\n                '\\\"value\\\": \\\"',\\r\\n                _value,\\r\\n                '\\\"',\\r\\n                \\\"}\\\"\\r\\n            )\\r\\n        );\\r\\n}\\r\\n\\r\\nfunction toString(uint256 value) pure returns (string memory) {\\r\\n    // Inspired by OraclizeAPI's implementation - MIT license\\r\\n    // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\r\\n\\r\\n    if (value == 0) {\\r\\n        return \\\"0\\\";\\r\\n    }\\r\\n    uint256 temp = value;\\r\\n    uint256 digits;\\r\\n    while (temp != 0) {\\r\\n        digits++;\\r\\n        temp /= 10;\\r\\n    }\\r\\n    bytes memory buffer = new bytes(digits);\\r\\n    while (value != 0) {\\r\\n        digits -= 1;\\r\\n        buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\r\\n        value /= 10;\\r\\n    }\\r\\n    return string(buffer);\\r\\n}\\r\\n\\r\\n/// [MIT License]\\r\\n/// @title Base64\\r\\n/// @notice Provides a function for encoding some bytes in base64\\r\\n/// @author Brecht Devos <brecht@loopring.org>\\r\\nlibrary Base64 {\\r\\n    bytes internal constant TABLE =\\r\\n        \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\r\\n\\r\\n    /// @notice Encodes some bytes to the base64 representation\\r\\n    function encode(bytes memory data) internal pure returns (string memory) {\\r\\n        uint256 len = data.length;\\r\\n        if (len == 0) return \\\"\\\";\\r\\n\\r\\n        // multiply by 4/3 rounded up\\r\\n        uint256 encodedLen = 4 * ((len + 2) / 3);\\r\\n\\r\\n        // Add some extra buffer at the end\\r\\n        bytes memory result = new bytes(encodedLen + 32);\\r\\n\\r\\n        bytes memory table = TABLE;\\r\\n\\r\\n        assembly {\\r\\n            let tablePtr := add(table, 1)\\r\\n            let resultPtr := add(result, 32)\\r\\n\\r\\n            for {\\r\\n                let i := 0\\r\\n            } lt(i, len) {\\r\\n\\r\\n            } {\\r\\n                i := add(i, 3)\\r\\n                let input := and(mload(add(data, i)), 0xffffff)\\r\\n\\r\\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\\r\\n                out := shl(8, out)\\r\\n                out := add(\\r\\n                    out,\\r\\n                    and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF)\\r\\n                )\\r\\n                out := shl(8, out)\\r\\n                out := add(\\r\\n                    out,\\r\\n                    and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF)\\r\\n                )\\r\\n                out := shl(8, out)\\r\\n                out := add(\\r\\n                    out,\\r\\n                    and(mload(add(tablePtr, and(input, 0x3F))), 0xFF)\\r\\n                )\\r\\n                out := shl(224, out)\\r\\n\\r\\n                mstore(resultPtr, out)\\r\\n\\r\\n                resultPtr := add(resultPtr, 4)\\r\\n            }\\r\\n\\r\\n            switch mod(len, 3)\\r\\n            case 1 {\\r\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\r\\n            }\\r\\n            case 2 {\\r\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\r\\n            }\\r\\n\\r\\n            mstore(result, encodedLen)\\r\\n        }\\r\\n\\r\\n        return string(result);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x3827a6e2765766d5ab16e0515a3170d23fc9fcc05ecb9711f91b22fa1432a4bd\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/Random.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\npragma solidity 0.8.6;\\r\\n\\r\\n/// @notice Formats, parses, and generates the DNA of our shadowy friends\\r\\n/// @dev    Reads from the `block` in `getSeed`\\r\\nlibrary Random {\\r\\n    uint256 private constant A = 0;\\r\\n    uint256 private constant G = 1;\\r\\n    uint256 private constant D = 2;\\r\\n    uint256 private constant T = 3;\\r\\n\\r\\n    /// @notice Builds a sequence from a seed\\r\\n    function sequence(uint256 seed) internal pure returns (string memory) {\\r\\n        uint256[9] memory values;\\r\\n\\r\\n        values[0] = seed % 100 > 50 ? G : A;\\r\\n        values[1] = seed % 500 > 195 ? G : D;\\r\\n        values[2] = seed % 2000 > 1667 ? D : A;\\r\\n        values[3] = (values[0] == G) && (values[0] == G) ? A : G;\\r\\n        values[4] = (values[1] == A) ? T : G;\\r\\n        values[5] = (values[1] == T) && seed % 2000 > 1667 ? G : A;\\r\\n        values[6] = (values[0] == G) && (values[0] == A) ? A : G;\\r\\n        values[7] = (values[2] == G) ? T : G;\\r\\n        values[8] = (values[3] == G) ? A : G;\\r\\n\\r\\n        string memory seq = string(\\r\\n            abi.encodePacked(\\r\\n                values[0],\\r\\n                values[1],\\r\\n                values[2],\\r\\n                values[3],\\r\\n                values[4],\\r\\n                values[5],\\r\\n                values[6],\\r\\n                values[7],\\r\\n                values[8]\\r\\n            )\\r\\n        );\\r\\n        return seq;\\r\\n    }\\r\\n\\r\\n    function getSeed(uint256 tokenId) internal view returns (uint256) {\\r\\n        uint256 seed = uint256(\\r\\n            keccak256(\\r\\n                abi.encode(\\r\\n                    keccak256(\\r\\n                        abi.encodePacked(\\r\\n                            block.timestamp,\\r\\n                            block.number,\\r\\n                            tx.origin,\\r\\n                            msg.sender,\\r\\n                            gasleft(),\\r\\n                            tokenId,\\r\\n                            blockhash(block.number),\\r\\n                            blockhash(block.number - 69)\\r\\n                        )\\r\\n                    )\\r\\n                )\\r\\n            )\\r\\n        );\\r\\n        return seed;\\r\\n    }\\r\\n\\r\\n    function roll(string memory input) internal pure returns (uint256) {\\r\\n        return (random(input) % 6) + 1;\\r\\n    }\\r\\n\\r\\n    function random(string memory input) internal pure returns (uint256) {\\r\\n        return uint256(keccak256(abi.encodePacked(input)));\\r\\n    }\\r\\n\\r\\n    function slot(\\r\\n        string memory prefix,\\r\\n        uint256 seed,\\r\\n        uint256 mod\\r\\n    ) internal pure returns (uint256) {\\r\\n        return random(string(abi.encodePacked(prefix, seed))) % mod;\\r\\n    }\\r\\n\\r\\n    function getBloodSeed(uint256 tokenId, string memory imageHash)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 seed = uint256(\\r\\n            keccak256(\\r\\n                abi.encode(\\r\\n                    keccak256(abi.encodePacked(getSeed(tokenId), imageHash))\\r\\n                )\\r\\n            )\\r\\n        );\\r\\n        return seed;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa17c5229fbd2da151d40e18b87435594f1b45dc7fd479ff06ac48dd24cd04389\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/TokenId.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0-or-later\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/// @title Encoding / decoding utilities for token ids\\r\\n/// @author Georgios Konstantopoulos\\r\\n/// @dev Token ids are generated from the components via a bijective encoding\\r\\n/// using the token type and its attributes. We shift left by 16 bits, i.e. 2 bytes\\r\\n/// each time so that the IDs do not overlap, assuming that components are smaller than 256\\r\\nlibrary TokenId {\\r\\n    // 2 bytes\\r\\n    uint256 constant SHIFT = 16;\\r\\n\\r\\n    /// Encodes an array of Loot components and an item type (weapon, chest etc.)\\r\\n    /// to a token id\\r\\n    function toId(uint256[5] memory components, uint256 itemType)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 id = itemType;\\r\\n        id += encode(components[0], 1);\\r\\n        id += encode(components[1], 2);\\r\\n        id += encode(components[2], 3);\\r\\n        id += encode(components[3], 4);\\r\\n        id += encode(components[4], 5);\\r\\n\\r\\n        return id;\\r\\n    }\\r\\n\\r\\n    /// Decodes a token id to an array of Loot components and its item type (weapon, chest etc.)\\r\\n    function fromId(uint256 id)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256[5] memory components, uint256 itemType)\\r\\n    {\\r\\n        itemType = decode(id, 0);\\r\\n        components[0] = decode(id, 1);\\r\\n        components[1] = decode(id, 2);\\r\\n        components[2] = decode(id, 3);\\r\\n        components[3] = decode(id, 4);\\r\\n        components[4] = decode(id, 5);\\r\\n    }\\r\\n\\r\\n    /// Masks the component with 0xff and left shifts it by `idx * 2 bytes\\r\\n    function encode(uint256 component, uint256 idx)\\r\\n        private\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return (component & 0xff) << (SHIFT * idx);\\r\\n    }\\r\\n\\r\\n    /// Right shifts the provided token id by `idx * 2 bytes` and then masks the\\r\\n    /// returned value with 0xff.\\r\\n    function decode(uint256 id, uint256 idx) private pure returns (uint256) {\\r\\n        return (id >> (SHIFT * idx)) & 0xff;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x4a59bc36f05591550c8847412cfadcb8baf01e459ab9f5db6d0f2fdf0e04b7b4\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/metadata/Attributes.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Components.sol\\\";\\r\\nimport \\\"./Scanner.sol\\\";\\r\\nimport \\\"../TokenId.sol\\\";\\r\\nimport { Base64, toString, trait } from \\\"../MetadataUtils.sol\\\";\\r\\n\\r\\n/// @title Helper contract for generating ERC-1155 token ids.\\r\\n/// @author Georgios Konstantopoulos\\r\\n/// @dev Inherit from this contract and use it to generate metadata for your tokens\\r\\n/// Flow:\\r\\n/// 1. tokenId from top level NFT\\r\\n/// 2. tokenId -> encodedId per attribute\\r\\n/// 3. Scanner(encodedId) -> individual attributes of each item\\r\\n/// 4. return all attributes of NFT\\r\\nlibrary Attributes {\\r\\n    using Components for uint256;\\r\\n\\r\\n    // ====== Attribute Storage =====\\r\\n\\r\\n    /// @notice Item Attribute Identifiers\\r\\n    struct ItemIds {\\r\\n        uint256 creature;\\r\\n        uint256 flaw;\\r\\n        uint256 origin;\\r\\n        uint256 bloodline;\\r\\n        uint256 ability;\\r\\n        uint256 name;\\r\\n    }\\r\\n\\r\\n    /// @notice Item Attributes Raw\\r\\n    struct ItemStrings {\\r\\n        string creature;\\r\\n        string flaw;\\r\\n        string origin;\\r\\n        string bloodline;\\r\\n        string ability;\\r\\n        string name;\\r\\n    }\\r\\n\\r\\n    // ===== Encoding Ids =====\\r\\n\\r\\n    /// @notice Given an item id, returns its name by decoding and parsing the id\\r\\n    function encodedIdToString(uint256 itemId)\\r\\n        internal\\r\\n        pure\\r\\n        returns (string memory)\\r\\n    {\\r\\n        (uint256[5] memory components, uint256 itemType) = TokenId.fromId(\\r\\n            itemId\\r\\n        );\\r\\n        return Scanner.componentsToString(components, itemType);\\r\\n    }\\r\\n\\r\\n    // ===== SVG Rendering =====\\r\\n\\r\\n    /// @notice Returns an SVG for the provided token id\\r\\n    /// @param  item Attributes of an item as strings\\r\\n    /// @param  last Additional data to append to SVG string\\r\\n    /// @return SVG string\\r\\n    function render(ItemStrings memory item, string memory last)\\r\\n        internal\\r\\n        pure\\r\\n        returns (string memory)\\r\\n    {\\r\\n        string[13] memory parts;\\r\\n        parts[\\r\\n            0\\r\\n        ] = '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" preserveAspectRatio=\\\"xMinYMin meet\\\" viewBox=\\\"0 0 350 350\\\"><style>.base { fill: white; font-family: serif; font-size: 14px; }</style><rect width=\\\"100%\\\" height=\\\"100%\\\" fill=\\\"black\\\" /><text x=\\\"10\\\" y=\\\"20\\\" class=\\\"base\\\">';\\r\\n\\r\\n        parts[1] = item.creature;\\r\\n\\r\\n        parts[2] = '</text><text x=\\\"10\\\" y=\\\"40\\\" class=\\\"base\\\">';\\r\\n\\r\\n        parts[3] = item.flaw;\\r\\n\\r\\n        parts[4] = '</text><text x=\\\"10\\\" y=\\\"60\\\" class=\\\"base\\\">';\\r\\n\\r\\n        parts[5] = item.origin;\\r\\n\\r\\n        parts[6] = '</text><text x=\\\"10\\\" y=\\\"80\\\" class=\\\"base\\\">';\\r\\n\\r\\n        parts[7] = item.bloodline;\\r\\n\\r\\n        parts[8] = '</text><text x=\\\"10\\\" y=\\\"100\\\" class=\\\"base\\\">';\\r\\n\\r\\n        parts[9] = item.ability;\\r\\n\\r\\n        parts[10] = '</text><text x=\\\"10\\\" y=\\\"120\\\" class=\\\"base\\\">';\\r\\n\\r\\n        parts[11] = item.name;\\r\\n\\r\\n        parts[12] = '</text><text x=\\\"10\\\" y=\\\"140\\\" class=\\\"base\\\">';\\r\\n\\r\\n        string memory output = string(\\r\\n            abi.encodePacked(\\r\\n                parts[0],\\r\\n                parts[1],\\r\\n                parts[2],\\r\\n                parts[3],\\r\\n                parts[4],\\r\\n                parts[5],\\r\\n                parts[6],\\r\\n                parts[7],\\r\\n                parts[8]\\r\\n            )\\r\\n        );\\r\\n\\r\\n        output = string(\\r\\n            abi.encodePacked(output, parts[9], parts[10], parts[11], parts[12])\\r\\n        );\\r\\n\\r\\n        output = string(abi.encodePacked(output, last, \\\"</text></svg>\\\"));\\r\\n\\r\\n        output = string(\\r\\n            abi.encodePacked(\\r\\n                '\\\"image\\\": \\\"data:image/svg+xml;base64,',\\r\\n                Base64.encode(bytes(output)),\\r\\n                '\\\", '\\r\\n            )\\r\\n        );\\r\\n\\r\\n        return output;\\r\\n    }\\r\\n\\r\\n    // ====== Attributes of NFT =====\\r\\n\\r\\n    /// @notice Returns the attributes of a `tokenId`\\r\\n    /// @dev Opensea Standards: https://docs.opensea.io/docs/metadata-standards\\r\\n    function attributes(ItemStrings memory items)\\r\\n        internal\\r\\n        pure\\r\\n        returns (string memory)\\r\\n    {\\r\\n        string memory output;\\r\\n\\r\\n        // should we also use components[0] which contains the item name?\\r\\n        string memory res = string(\\r\\n            abi.encodePacked(\\\"[\\\", trait(Scanner.getItemType(0), items.creature))\\r\\n        );\\r\\n\\r\\n        res = string(\\r\\n            abi.encodePacked(\\r\\n                res,\\r\\n                \\\", \\\",\\r\\n                trait(Scanner.getItemType(1), items.flaw)\\r\\n            )\\r\\n        );\\r\\n\\r\\n        res = string(\\r\\n            abi.encodePacked(\\r\\n                res,\\r\\n                \\\", \\\",\\r\\n                trait(Scanner.getItemType(2), items.origin)\\r\\n            )\\r\\n        );\\r\\n\\r\\n        res = string(\\r\\n            abi.encodePacked(\\r\\n                res,\\r\\n                \\\", \\\",\\r\\n                trait(Scanner.getItemType(3), items.bloodline)\\r\\n            )\\r\\n        );\\r\\n\\r\\n        res = string(\\r\\n            abi.encodePacked(\\r\\n                res,\\r\\n                \\\", \\\",\\r\\n                trait(Scanner.getItemType(4), items.ability)\\r\\n            )\\r\\n        );\\r\\n\\r\\n        res = string(\\r\\n            abi.encodePacked(\\r\\n                res,\\r\\n                \\\", \\\",\\r\\n                trait(Scanner.getItemType(5), items.name)\\r\\n            )\\r\\n        );\\r\\n\\r\\n        res = string(abi.encodePacked(res, \\\"]\\\"));\\r\\n\\r\\n        output = string(abi.encodePacked('\\\"attributes\\\": ', res, \\\"}\\\"));\\r\\n        return output;\\r\\n    }\\r\\n\\r\\n    // ===== Encode Individual Item Ids =====\\r\\n\\r\\n    // View helpers for getting the item ID that corresponds to a bag's items\\r\\n    function creatureId(uint256 tokenId) internal pure returns (uint256) {\\r\\n        return TokenId.toId(tokenId.creatureComponents(), Scanner.CREATURE);\\r\\n    }\\r\\n\\r\\n    function flawId(uint256 tokenId) internal pure returns (uint256) {\\r\\n        return TokenId.toId(tokenId.flawComponents(), Scanner.FLAW);\\r\\n    }\\r\\n\\r\\n    function originId(uint256 tokenId, bool shadowChain)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return\\r\\n            TokenId.toId(tokenId.originComponents(shadowChain), Scanner.ORIGIN);\\r\\n    }\\r\\n\\r\\n    function bloodlineId(uint256 tokenId) internal pure returns (uint256) {\\r\\n        return TokenId.toId(tokenId.bloodlineComponents(), Scanner.BLOODLINE);\\r\\n    }\\r\\n\\r\\n    function abilityId(uint256 tokenId) internal pure returns (uint256) {\\r\\n        return TokenId.toId(tokenId.abilityComponents(), Scanner.ABILITY);\\r\\n    }\\r\\n\\r\\n    function nameId(uint256 tokenId) internal pure returns (uint256) {\\r\\n        return TokenId.toId(tokenId.nameComponents(), Scanner.NAME);\\r\\n    }\\r\\n\\r\\n    // ===== Utility =====\\r\\n\\r\\n    /// @notice Converts a `tokenId` into an Item with ids\\r\\n    /// @return Item attributes as ids\\r\\n    function ids(uint256 tokenId) internal pure returns (ItemIds memory) {\\r\\n        return\\r\\n            ItemIds({\\r\\n                creature: Attributes.creatureId(tokenId),\\r\\n                flaw: Attributes.flawId(tokenId),\\r\\n                origin: Attributes.originId(tokenId, false),\\r\\n                bloodline: Attributes.bloodlineId(tokenId),\\r\\n                ability: Attributes.abilityId(tokenId),\\r\\n                name: Attributes.nameId(tokenId)\\r\\n            });\\r\\n    }\\r\\n\\r\\n    /// @notice Converts an Item's attribute identifiers into strings\\r\\n    /// @return Item attributes as strings\\r\\n    function props(ItemIds memory items)\\r\\n        internal\\r\\n        pure\\r\\n        returns (ItemStrings memory)\\r\\n    {\\r\\n        return\\r\\n            ItemStrings({\\r\\n                creature: encodedIdToString(items.creature),\\r\\n                flaw: encodedIdToString(items.flaw),\\r\\n                origin: encodedIdToString(items.origin),\\r\\n                bloodline: encodedIdToString(items.bloodline),\\r\\n                ability: encodedIdToString(items.ability),\\r\\n                name: encodedIdToString(items.name)\\r\\n            });\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x36ea5810da2542a0b4072ccc7b1b0ea9684a047b647ec9087fc19c940f4f8a7b\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/metadata/Components.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../strings.sol\\\";\\r\\nimport \\\"../MetadataUtils.sol\\\";\\r\\nimport \\\"../Random.sol\\\";\\r\\n\\r\\n/// @notice Inspired by LootComponents by dhof\\r\\n/// @dev    Raw materials arrays and a plucker\\r\\nlibrary Components {\\r\\n    using strings for string;\\r\\n    using strings for strings.slice;\\r\\n\\r\\n    string internal constant suffixes =\\r\\n        \\\"of Borrowed Souls,of Synthetics,of Yield, of Qua'Driga,of Liquidation Pools,of Power,of Giants,of Titans,of Skill,of Perfection,of Brilliance,of Enlightenment,of Protection,of Anger,of Rage,of Fury,of Vitriol,of the Fox,of Detection,of Reflection,of the Twins\\\";\\r\\n    uint256 constant suffixesLength = 21;\\r\\n\\r\\n    string internal constant namePrefixes =\\r\\n        \\\"Balthazar,NoGm,The Larp,The Rugged,The Doxxed,The Simp,The Meme,The Top buyer,The Bottom seller,The Moon,The Oracle,Agony,Apocalypse,Armageddon,Beast,Behemoth,Blight,Blood,Bramble,Brimstone,Brood,Carrion,Cataclysm,Chimeric,Corpse,Corruption,Damnation,Death,Demon,Dire,Dragon,Dread,Doom,Dusk,Eagle,Empyrean,Fate,Foe,Gale,Ghoul,Gloom,Glyph,Golem,Grim,Hate,Havoc,Honour,Horror,Hypnotic,Kraken,Loath,Maelstrom,Mind,Miracle,Morbid,Oblivion,Onslaught,Pain,Pandemonium,Phoenix,Plague,Rage,Rapture,Rune,Skull,Sol,Soul,Sorrow,Spirit,Storm,Tempest,Torment,Vengeance,Victory,Viper,Vortex,Woe,Wrath,Light's,Shimmering\\\";\\r\\n    uint256 constant namePrefixesLength = 80;\\r\\n\\r\\n    string internal constant nameSuffixes =\\r\\n        \\\"Nocoiner,Maximus,Ngmi,Degen,Black Hat,White Hat,All-In,Apesbane,Bearsbane,Minimaxi,Bridgecrosser,Bridgeburner,Goldman,Bane,Root,Bite,Song,Roar,Grasp,Instrument,Glow,Bender,Shadow,Whisper,Shout,Growl,Tear,Peak,Form,Sun,Moon\\\";\\r\\n    uint256 constant nameSuffixesLength = 31;\\r\\n\\r\\n    string internal constant creatures =\\r\\n        \\\"None,Twisted Memwraith,Hashenhorror,Shadow Wen,Bear Ape,Moon Wolf,Size Lorde,Degendragon,GM Doge,Lite Llama,Yearning Nymph,Crvaceous Snake,Holovyper,Wailing Integer,Craaven Defaulter,Floating Eyes of Sec,Byzantine Princesss,Manbearpig,Larping Terror,T-Rekt,Defi-ant ,Ropsten Whale,Llama,Enchanted Rug,Blind Oracle,Gwei Accountant,Lazarus Cotten,Mempool Wraith,Pernicious penguins,Seed Stalker,Snark,Shadowswapper,Ravage 0xxl,Market Rat,Dread Dip Dog,Axallaxxa,Fragmented Cobielodon,Jomoeon,Umbramystics,Pepboi,Cypher Ghouls,Censor Vines,Tormented Gorgon,Sushi Kraken,Alpha-eating Ooze,Blathering Kirby,Rinkeby Raider,Smol banteg\\\";\\r\\n    uint256 internal constant creaturesLength = 47;\\r\\n\\r\\n    string internal constant flaws =\\r\\n        \\\"Rugged ,Doxxed,Liquidated,Waifu simp,Exploited,Paper hands,Flash Loaned,UTXO,Theorist,NGMI,Mid IQ,Copy Trader,Larper,Floor seller,Goxxed,Oyster Forked,Chad Bro,Exit Liquidity,Hacked,Failed Transaction\\\";\\r\\n    uint256 internal constant flawsLength = 20;\\r\\n\\r\\n    string internal constant origins =\\r\\n        \\\"Shadowkain's Domain,Kulechovs Dominion ,Perilous Farms,Oceans of Degen Tears,Dark Forest,Mempool,Shadowchain,Polygonal Meshspace,Lands of Arbitrary Optimism,Chainspace,Chains of Nazarov,Blue Lagoon,Swamp,Genesis Cube\\\";\\r\\n    uint256 internal constant originsLength = 14;\\r\\n\\r\\n    string internal constant bloodlines =\\r\\n        \\\"O,Wokr,Vmew,Kali-Zui,Zaphthrot,Luban,Yu-Koth,Sturrosh,Ia-Ngai,Khakh,Gyathna,Huacas,Zhar & Lloigor,Xl-rho,Shudde Mell,Crethagu,Unsca Norna,Phvithvre,Yorae,Ydheut,Pa'ch,Waarza,Chhnghu,Shi-Yvgaa,Ximayya Xan,l'Totoxl,Wakan,Ythogtha,Ub-ji,Shuaicha,Sthuma,Senne'll,Xyngogtha\\\";\\r\\n    //\\\"QmTWXhdXKcw6RXhKPcBhWVmj12wRLvYcgrSpT1nikmBtGv,QmfJsL7Lh2jrRqaTMxorT7qRuMuDSW7jLMb2vQuyMhHokk,QmdcDCzGVTo2VPwj1haCuPoop5SkC9BFroXU4aw9Hza67e,QmenTr74f5Hn5SkJT1NTEFWSaT49F8fi2onT146UwgdshR,QmfVgziuVbPovhQqKgW8J3DQYRieQx9PmHNSe4yUbZYT4W,QmSXxRgxn2hevEDXDw1KPMNpBrTxGAZXAbfCsXRbKQ7FNR,QmYD8wuKLojhuR7VyJTBxEwFjpTFQciLU5QmKfD1k4SeVF,QmPEgBRK6wGhCkKPwAw9j2Na86cp77fmjtMVfT5V4VYWpQ,QmWuHooTjwnDZw4CS58bUWwoSUP9PMjp3vxN3Rmkc3JDU2,QmWhZ9rYPU7S5hkGv4gXQuqMu85Z87oWK1f3hCFK2T9fbD,QmSmxeYAQsHeV5cY75ijruASZ4HpG64SskdTLVYUzBmJUm,Qmbje3tHZNXnCYz3mfzFxQ2ZzpXNYtwWRCoviLC29euWud,QmR7VG4etp7ueP1yoFw7uaZGCLckcf4qhkbTaTK5C8Wd2E,QmPRDQX7GekyKsispCZKJ4cRLxwhVBN3TbWEAqMLPZvqec,QmRwUvuDja6Ss2NNKUnBqsJhHaDMNyW6FdzzSVG77ACcaz,QmcTZRpjWd9b4FkPSR5bGwx3r5cko9jqks5H5b81rjCjLp,QmV3Pbskd7D4DPmseyojXo4E8uzm6rbiPASh6b2TpU38n4,QmWYFJDqDuDrKikgAJj45Mr5gQ37dPywK6D5giFerT3oVG,QmavyWUXwnpvgMHad2pXkALe1WHq9pJatFkqW67p7Nv5Jm,QmSwu6wHHHu8DYXZB9HXRpc2mnrAUYFQbbLHmzMgxxEKZq,QmQJitWq2HjuBsrfm5W4zzsAowe5agM2pbeDg5a43Fh2cv,QmPCGrxrJ77VRzCMpmgFszFx9Ky2FXhHrNKtv8kfBA276Y,QmeenofHLBmbPDvh6bf9pDwXXtuerGunDLYRjpurmV3qt2,QmSR9pWx9wHaD4tTyJrjGYrYkYwvBcBYieGqnhzwEJfHo1,QmXpXZWi7PQdZuYg1aBr8oDbgaVmSXY2D1rRDnjQ8Ax5zK,Qmc3DYKkQX9tXfy4c5qzc6KKKSUYu1iEwZRNkZpgXRNTsR,QmVQ1VjppWsuspouBKNB73Wk1K1U273zVAwJPuW8aEKK9N,QmSR9pWx9wHaD4tTyJrjGYrYkYwvBcBYieGqnhzwEJfHo1,Qmb3ZVTSX4bHR7WaRVeupnnnZ9wvov9HHA4zdpZVL8hcyi,QmUm6BeTkSu8brGG1ZwXENBuUihPGLX79whA9t1ZrKhjkQ,QmPcfHotn4MCtuMk5HnPSTEr2jjaonoGUZBNM9zs8Y9X9S,QmPCTkdEAsALUYQcdbmpbZrgCSMfgX9x7UsVFqtGCEn7JN,QmdUwtdf3UwZhPcWi1Qw1DPoANdPcdPZQSz95tpc8sSX5w\\\";\\r\\n    uint256 internal constant bloodlinesLength = 33;\\r\\n\\r\\n    string internal constant abilities =\\r\\n        \\\"3'3,Shitposting,Diamond Bull Horns,Masternode,Front Running,MEV Collector,NFT Flipper,Artblocks connoisseur ,Diamond hands,Free transactions,Perma Low Gas Fees,Made it ,Flash Bundler,Private relays,Compounding,Galaxy Brain,Low IQ,High IQ\\\";\\r\\n    uint256 internal constant abilitiesLength = 18;\\r\\n\\r\\n    string internal constant names =\\r\\n        \\\"Satoshi,Vitalik,Vlad,Adam,Ailmar,Darfin,Jhaan,Zabbas,Neldor,Gandor,Bellas,Daealla,Nym,Vesryn,Angor,Gogu,Malok,Rotnam,Chalia,Astra,Fabien,Orion,Quintus,Remus,Rorik,Sirius,Sybella,Azura,Dorath,Freya,Ophelia,Yvanna,Zeniya,James,Robert,John,Michael,William,David,Richard,Joseph,Thomas,Charles,Mary,Patricia,Jennifer,Linda,Elizabeth,Barbara,Susan,Jessica,Sarah,Karen,Dilibe,Eva,Matthew,Bolethe,Polycarp,Ambrogino,Jiri,Chukwuebuka,Chinonyelum,Mikael,Mira,Aniela,Samuel,Isak,Archibaldo,Chinyelu,Kerstin,Abigail,Olympia,Grace,Nahum,Elisabeth,Serge,Sugako,Patrick,Florus,Svatava,Ilona,Lachlan,Caspian,Filippa,Paulo,Darda,Linda,Gradasso,Carly,Jens,Betty,Ebony,Dennis,Martin Davorin,Laura,Jesper,Remy,Onyekachukwu,Jan,Dioscoro,Hilarij,Rosvita,Noah,Patrick,Mohammed,Chinwemma,Raff,Aron,Miguel,Dzemail,Gawel,Gustave,Efraim,Adelbert,Jody,Mackenzie,Victoria,Selam,Jenci,Ulrich,Chishou,Domonkos,Stanislaus,Fortinbras,George,Daniel,Annabelle,Shunichi,Bogdan,Anastazja,Marcus,Monica,Martin,Yuukou,Harriet,Geoffrey,Jonas,Dennis,Hana,Abdelhak,Ravil,Patrick,Karl,Eve,Csilla,Isabella,Radim,Thomas,Faina,Rasmus,Alma,Charles,Chad,Zefram,Hayden,Joseph,Andre,Irene,Molly,Cindy,Su,Stani,Ed,Janet,Cathy,Kyle,Zaki,Belle,Bella,Jessica,Amou,Steven,Olgu,Eva,Ivan,Vllad,Helga,Anya,John,Rita,Evan,Jason,Donald,Tyler,Changpeng,Sam\\\";\\r\\n    uint256 internal constant namesLength = 186;\\r\\n\\r\\n    // ===== Components ====\\r\\n\\r\\n    function creatureComponents(uint256 tokenId)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256[5] memory)\\r\\n    {\\r\\n        return pluck(tokenId, \\\"CREATURE\\\", creaturesLength);\\r\\n    }\\r\\n\\r\\n    function flawComponents(uint256 tokenId)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256[5] memory)\\r\\n    {\\r\\n        return pluck(tokenId, \\\"FLAW\\\", flawsLength);\\r\\n    }\\r\\n\\r\\n    function originComponents(uint256 tokenId, bool shadowChain)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256[5] memory)\\r\\n    {\\r\\n        if (shadowChain) return pluck(tokenId, \\\"ORIGIN\\\", 5);\\r\\n        return pluck(tokenId, \\\"ORIGIN\\\", originsLength);\\r\\n    }\\r\\n\\r\\n    function bloodlineComponents(uint256 tokenId)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256[5] memory)\\r\\n    {\\r\\n        return pluck(tokenId, \\\"BLOODLINE\\\", bloodlinesLength);\\r\\n    }\\r\\n\\r\\n    function abilityComponents(uint256 tokenId)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256[5] memory)\\r\\n    {\\r\\n        return pluck(tokenId, \\\"ABILITY\\\", abilitiesLength);\\r\\n    }\\r\\n\\r\\n    function nameComponents(uint256 tokenId)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256[5] memory)\\r\\n    {\\r\\n        return pluck(tokenId, \\\"NAME\\\", namesLength);\\r\\n    }\\r\\n\\r\\n    // ===== Pluck Index Numbers of Raw Materials =====\\r\\n\\r\\n    function pluck(\\r\\n        uint256 tokenId,\\r\\n        string memory keyPrefix,\\r\\n        uint256 sourceCSVLength\\r\\n    ) internal pure returns (uint256[5] memory) {\\r\\n        uint256[5] memory components;\\r\\n\\r\\n        uint256 rand = Random.random(\\r\\n            string(abi.encodePacked(keyPrefix, toString(tokenId)))\\r\\n        );\\r\\n\\r\\n        components[0] = rand % sourceCSVLength;\\r\\n        components[1] = 0;\\r\\n        components[2] = 0;\\r\\n\\r\\n        uint256 greatness = rand % 21;\\r\\n        if (greatness > 14) {\\r\\n            components[1] = (rand % suffixesLength) + 1;\\r\\n        }\\r\\n        if (greatness >= 19) {\\r\\n            components[2] = (rand % namePrefixesLength) + 1;\\r\\n            components[3] = (rand % nameSuffixesLength) + 1;\\r\\n            if (greatness == 19) {\\r\\n                // ...\\r\\n            } else {\\r\\n                components[4] = 1;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return components;\\r\\n    }\\r\\n\\r\\n    // ===== Get Item from Components =====\\r\\n\\r\\n    function getItemFromCSV(string memory str, uint256 index)\\r\\n        internal\\r\\n        pure\\r\\n        returns (string memory)\\r\\n    {\\r\\n        strings.slice memory strSlice = str.toSlice();\\r\\n        string memory separatorStr = \\\",\\\";\\r\\n        strings.slice memory separator = separatorStr.toSlice();\\r\\n        strings.slice memory item;\\r\\n        for (uint256 i = 0; i <= index; i++) {\\r\\n            item = strSlice.split(separator);\\r\\n        }\\r\\n        return item.toString();\\r\\n    }\\r\\n\\r\\n    // ===== Get Item from Affixes ====\\r\\n\\r\\n    function getNamePrefixes(uint256 index)\\r\\n        internal\\r\\n        pure\\r\\n        returns (string memory)\\r\\n    {\\r\\n        return getItemFromCSV(namePrefixes, index);\\r\\n    }\\r\\n\\r\\n    function getNameSuffixes(uint256 index)\\r\\n        internal\\r\\n        pure\\r\\n        returns (string memory)\\r\\n    {\\r\\n        return getItemFromCSV(nameSuffixes, index);\\r\\n    }\\r\\n\\r\\n    function getSuffixes(uint256 index) internal pure returns (string memory) {\\r\\n        return getItemFromCSV(suffixes, index);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0f14fdb886083085e1ea7ff856f872b4938ffaa2ccaf88275ce6cc4e9e13fbef\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/metadata/Scanner.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0-or-later\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Components.sol\\\";\\r\\nimport \\\"../TokenId.sol\\\";\\r\\nimport { Base64, toString, trait } from \\\"../MetadataUtils.sol\\\";\\r\\n\\r\\n/// @title Scans attributes of each component and parses them into traits\\r\\n/// Flow:\\r\\n/// 1. encodedId -> components[5] using TokenId.fromId()\\r\\n/// 2. components[5] -> individual traits of each component\\r\\nlibrary Scanner {\\r\\n    using Components for uint256;\\r\\n\\r\\n    // ===== Attribute Slots =====\\r\\n\\r\\n    uint256 internal constant CREATURE = 0x0;\\r\\n    uint256 internal constant FLAW = 0x1;\\r\\n    uint256 internal constant ORIGIN = 0x2;\\r\\n    uint256 internal constant BLOODLINE = 0x3;\\r\\n    uint256 internal constant ABILITY = 0x4;\\r\\n    uint256 internal constant NAME = 0x5;\\r\\n\\r\\n    string internal constant itemTypes =\\r\\n        \\\"Creature,Flaw,Origin,Bloodline,Ability,Name\\\";\\r\\n\\r\\n    // ====== Item Slot Fetcher =====\\r\\n\\r\\n    /// @return Item at `index` of `itemTypes` csv, i.e. index = 0, item = Creature\\r\\n    function getItemType(uint256 index) internal pure returns (string memory) {\\r\\n        return Components.getItemFromCSV(itemTypes, index);\\r\\n    }\\r\\n\\r\\n    // ===== Attributes of Item of NFT =====\\r\\n\\r\\n    /// @notice Parses encodedIds into an array of components, which is stringified\\r\\n    /// @dev Opensea Standards: https://docs.opensea.io/docs/metadata-standards\\r\\n    /// @return Attributes of each component of the item string\\r\\n    function attributes(uint256 id) internal pure returns (string memory) {\\r\\n        (uint256[5] memory components, uint256 itemType) = TokenId.fromId(id);\\r\\n        // should we also use components[0] which contains the item name?\\r\\n        string memory slot = getItemType(itemType);\\r\\n        string memory res = string(abi.encodePacked(\\\"[\\\", trait(\\\"Slot\\\", slot)));\\r\\n\\r\\n        string memory item = base(itemType, components[0]);\\r\\n        res = string(abi.encodePacked(res, \\\", \\\", trait(\\\"Item\\\", item)));\\r\\n\\r\\n        if (components[1] > 0) {\\r\\n            string memory data = Components.getSuffixes(components[1] - 1);\\r\\n            res = string(abi.encodePacked(res, \\\", \\\", trait(\\\"Suffix\\\", data)));\\r\\n        }\\r\\n\\r\\n        if (components[2] > 0) {\\r\\n            string memory data = Components.getNamePrefixes(components[2] - 1);\\r\\n            res = string(\\r\\n                abi.encodePacked(res, \\\", \\\", trait(\\\"Name Prefix\\\", data))\\r\\n            );\\r\\n        }\\r\\n\\r\\n        if (components[3] > 0) {\\r\\n            string memory data = Components.getNameSuffixes(components[3] - 1);\\r\\n            res = string(\\r\\n                abi.encodePacked(res, \\\", \\\", trait(\\\"Name Suffix\\\", data))\\r\\n            );\\r\\n        }\\r\\n\\r\\n        if (components[4] > 0) {\\r\\n            res = string(\\r\\n                abi.encodePacked(res, \\\", \\\", trait(\\\"Augmentation\\\", \\\"Yes\\\"))\\r\\n            );\\r\\n        }\\r\\n\\r\\n        res = string(abi.encodePacked(res, \\\"]\\\"));\\r\\n\\r\\n        return res;\\r\\n    }\\r\\n\\r\\n    // ===== Gets the Attribute Slot =====\\r\\n\\r\\n    // Returns the \\\"vanilla\\\" item name w/o any prefix/suffixes or augmentations\\r\\n    function base(uint256 itemType, uint256 idx)\\r\\n        internal\\r\\n        pure\\r\\n        returns (string memory)\\r\\n    {\\r\\n        string memory arr;\\r\\n        if (itemType == CREATURE) {\\r\\n            arr = Components.creatures;\\r\\n        } else if (itemType == FLAW) {\\r\\n            arr = Components.flaws;\\r\\n        } else if (itemType == ORIGIN) {\\r\\n            arr = Components.origins;\\r\\n        } else if (itemType == BLOODLINE) {\\r\\n            arr = Components.bloodlines;\\r\\n        } else if (itemType == ABILITY) {\\r\\n            arr = Components.abilities;\\r\\n        } else if (itemType == NAME) {\\r\\n            arr = Components.names;\\r\\n        } else {\\r\\n            revert(\\\"Unexpected property\\\");\\r\\n        }\\r\\n\\r\\n        return Components.getItemFromCSV(arr, idx);\\r\\n    }\\r\\n\\r\\n    // ===== Components -> Items as strings =====\\r\\n\\r\\n    /// @notice Creates the token description given its components and what type it is\\r\\n    function componentsToString(uint256[5] memory components, uint256 itemType)\\r\\n        internal\\r\\n        pure\\r\\n        returns (string memory)\\r\\n    {\\r\\n        // item type: what slot to get\\r\\n        // components[0] the index in the array\\r\\n        string memory item = base(itemType, components[0]);\\r\\n\\r\\n        // We need to do -1 because the 'no description' is not part of loot copmonents\\r\\n\\r\\n        // add the suffix\\r\\n        if (components[1] > 0) {\\r\\n            item = string(\\r\\n                abi.encodePacked(\\r\\n                    item,\\r\\n                    \\\" \\\",\\r\\n                    Components.getItemFromCSV(\\r\\n                        Components.suffixes,\\r\\n                        components[1] - 1\\r\\n                    )\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n\\r\\n        // add the name prefix / suffix\\r\\n        if (components[2] > 0) {\\r\\n            // prefix\\r\\n            string memory namePrefixSuffix = string(\\r\\n                abi.encodePacked(\\r\\n                    \\\"'\\\",\\r\\n                    Components.getNamePrefixes(components[2] - 1)\\r\\n                )\\r\\n            );\\r\\n            if (components[3] > 0) {\\r\\n                namePrefixSuffix = string(\\r\\n                    abi.encodePacked(\\r\\n                        namePrefixSuffix,\\r\\n                        \\\" \\\",\\r\\n                        Components.getNameSuffixes(components[3] - 1)\\r\\n                    )\\r\\n                );\\r\\n            }\\r\\n\\r\\n            namePrefixSuffix = string(abi.encodePacked(namePrefixSuffix, \\\"' \\\"));\\r\\n\\r\\n            item = string(abi.encodePacked(namePrefixSuffix, item));\\r\\n        }\\r\\n\\r\\n        // add the augmentation\\r\\n        if (components[4] > 0) {\\r\\n            item = string(abi.encodePacked(item, \\\" +1\\\"));\\r\\n        }\\r\\n\\r\\n        return item;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x36ad09ff5f3d998ebfb652c1ae4ba239d899f39bd918ee5a20c0ba5be0c0cc7e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/metadata/ShadowlingMetadata.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0-or-later\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Attributes.sol\\\";\\r\\nimport \\\"./Stats.sol\\\";\\r\\nimport \\\"../TokenId.sol\\\";\\r\\nimport { Base64, toString } from \\\"../MetadataUtils.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\r\\n\\r\\n/// @title Helper contract for generating ERC-1155 token ids and descriptions for\\r\\n/// the individual items inside a Loot bag.\\r\\n/// @author Georgios Konstantopoulos\\r\\n/// @dev Inherit from this contract and use it to generate metadata for your tokens\\r\\ncontract ShadowlingMetadata is ERC721Enumerable {\\r\\n    mapping(uint256 => Attributes.ItemIds) public propertiesOf;\\r\\n\\r\\n    constructor() ERC721(\\\"Shadowling\\\", \\\"SHDW\\\") {}\\r\\n\\r\\n    /// @dev Opensea contract metadata: https://docs.opensea.io/docs/contract-level-metadata\\r\\n    function contractURI() external pure returns (string memory) {\\r\\n        string\\r\\n            memory json = '{\\\"name\\\": \\\"Shadowling\\\", \\\"description\\\": \\\"Shadowlings follow you in your journey across chainspace, the shadowchain, and beyond...\\\"}';\\r\\n        string memory encodedJson = Base64.encode(bytes(json));\\r\\n        string memory output = string(\\r\\n            abi.encodePacked(\\\"data:application/json;base64,\\\", encodedJson)\\r\\n        );\\r\\n\\r\\n        return output;\\r\\n    }\\r\\n\\r\\n    /// @notice Returns an SVG for the provided token id\\r\\n    function tokenURI(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        override(ERC721)\\r\\n        returns (string memory)\\r\\n    {\\r\\n        Attributes.ItemStrings memory props = properties(tokenId);\\r\\n        string memory stats = Stats.render(tokenId);\\r\\n        string memory json = Base64.encode(\\r\\n            bytes(\\r\\n                string(\\r\\n                    abi.encodePacked(\\r\\n                        '{ \\\"name\\\": \\\"',\\r\\n                        \\\"Shadowling\\\",\\r\\n                        '\\\", ',\\r\\n                        '\\\"description\\\" : ',\\r\\n                        '\\\"Shadowlings follow you in your journey across chainspace, the shadowchain, and beyond...\\\", ',\\r\\n                        Attributes.render(props, stats),\\r\\n                        Attributes.attributes(props)\\r\\n                    )\\r\\n                )\\r\\n            )\\r\\n        );\\r\\n        string memory output = string(\\r\\n            abi.encodePacked(\\\"data:application/json;base64,\\\", json)\\r\\n        );\\r\\n\\r\\n        return output;\\r\\n    }\\r\\n\\r\\n    /// @notice Returns the attributes properties of a `tokenId`\\r\\n    /// @dev Opensea Standards: https://docs.opensea.io/docs/metadata-standards\\r\\n    function attributes(uint256 tokenId) public view returns (string memory) {\\r\\n        return Attributes.attributes(properties(tokenId));\\r\\n    }\\r\\n\\r\\n    /// @notice Returns the attributes properties of a single item\\r\\n    /// @dev Opensea Standards: https://docs.opensea.io/docs/metadata-standards\\r\\n    /// @param  itemId A value in propertiesOf[tokenId]\\r\\n    function attributesItem(uint256 itemId)\\r\\n        public\\r\\n        pure\\r\\n        returns (string memory)\\r\\n    {\\r\\n        return Scanner.attributes(itemId);\\r\\n    }\\r\\n\\r\\n    function properties(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        returns (Attributes.ItemStrings memory)\\r\\n    {\\r\\n        return Attributes.props(propertiesOf[tokenId]);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x12e3852f5cc5a486f4dd1b6d09e54d1114914b47da8518c2feef7b27594eb07f\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/metadata/Stats.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0-or-later\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../Random.sol\\\";\\r\\nimport { Base64, toString } from \\\"../MetadataUtils.sol\\\";\\r\\n\\r\\n/// @notice Inspired by Andy\\r\\nlibrary Stats {\\r\\n    // ===== Stats in SVG =====\\r\\n\\r\\n    function render(uint256 tokenId) internal pure returns (string memory) {\\r\\n        string[11] memory stats;\\r\\n\\r\\n        stats[0] = strStat(tokenId);\\r\\n        stats[1] = '</text><text x=\\\"10\\\" y=\\\"160\\\" class=\\\"base\\\">';\\r\\n        stats[2] = dexStat(tokenId);\\r\\n        stats[3] = '</text><text x=\\\"10\\\" y=\\\"180\\\" class=\\\"base\\\">';\\r\\n        stats[4] = conStat(tokenId);\\r\\n        stats[5] = '</text><text x=\\\"10\\\" y=\\\"200\\\" class=\\\"base\\\">';\\r\\n        stats[6] = intStat(tokenId);\\r\\n        stats[7] = '</text><text x=\\\"10\\\" y=\\\"220\\\" class=\\\"base\\\">';\\r\\n        stats[8] = wisStat(tokenId);\\r\\n        stats[9] = '</text><text x=\\\"10\\\" y=\\\"240\\\" class=\\\"base\\\">';\\r\\n        stats[10] = chaStat(tokenId);\\r\\n\\r\\n        string memory output = string(\\r\\n            abi.encodePacked(\\r\\n                stats[0],\\r\\n                stats[1],\\r\\n                stats[2],\\r\\n                stats[3],\\r\\n                stats[4],\\r\\n                stats[5],\\r\\n                stats[6],\\r\\n                stats[7],\\r\\n                stats[8]\\r\\n            )\\r\\n        );\\r\\n\\r\\n        output = string(abi.encodePacked(output, stats[9], stats[10]));\\r\\n        return output;\\r\\n    }\\r\\n\\r\\n    // ===== Individual Stats =====\\r\\n\\r\\n    function strStat(uint256 tokenId) internal pure returns (string memory) {\\r\\n        return pluckStat(tokenId, \\\"STRENGTH\\\");\\r\\n    }\\r\\n\\r\\n    function dexStat(uint256 tokenId) internal pure returns (string memory) {\\r\\n        return pluckStat(tokenId, \\\"DEXTERITY\\\");\\r\\n    }\\r\\n\\r\\n    function conStat(uint256 tokenId) internal pure returns (string memory) {\\r\\n        return pluckStat(tokenId, \\\"CONSTITUTION\\\");\\r\\n    }\\r\\n\\r\\n    function intStat(uint256 tokenId) internal pure returns (string memory) {\\r\\n        return pluckStat(tokenId, \\\"INTELLIGENCE\\\");\\r\\n    }\\r\\n\\r\\n    function wisStat(uint256 tokenId) internal pure returns (string memory) {\\r\\n        return pluckStat(tokenId, \\\"WISDOM\\\");\\r\\n    }\\r\\n\\r\\n    function chaStat(uint256 tokenId) internal pure returns (string memory) {\\r\\n        return pluckStat(tokenId, \\\"CHARISMA\\\");\\r\\n    }\\r\\n\\r\\n    // ===== Roll Stat =====\\r\\n\\r\\n    function pluckStat(uint256 tokenId, string memory keyPrefix)\\r\\n        internal\\r\\n        pure\\r\\n        returns (string memory)\\r\\n    {\\r\\n        uint256 roll1 = Random.roll(\\r\\n            string(abi.encodePacked(keyPrefix, toString(tokenId), \\\"1\\\"))\\r\\n        );\\r\\n        uint256 min = roll1;\\r\\n        uint256 roll2 = Random.roll(\\r\\n            string(abi.encodePacked(keyPrefix, toString(tokenId), \\\"2\\\"))\\r\\n        );\\r\\n        min = min > roll2 ? roll2 : min;\\r\\n        uint256 roll3 = Random.roll(\\r\\n            string(abi.encodePacked(keyPrefix, toString(tokenId), \\\"3\\\"))\\r\\n        );\\r\\n        min = min > roll3 ? roll3 : min;\\r\\n        uint256 roll4 = Random.roll(\\r\\n            string(abi.encodePacked(keyPrefix, toString(tokenId), \\\"4\\\"))\\r\\n        );\\r\\n        min = min > roll4 ? roll4 : min;\\r\\n\\r\\n        // get 3 highest dice rolls\\r\\n        uint256 stat = roll1 + roll2 + roll3 + roll4 - min;\\r\\n        string memory output = string(\\r\\n            abi.encodePacked(keyPrefix, \\\": \\\", toString(stat))\\r\\n        );\\r\\n\\r\\n        return output;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x157d64c1bb53019ef7bc4781ef0e14e1dc3a5c0cfc61392f4d01a2a9501e8969\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/strings.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n/*\\r\\n * @title String & slice utility library for Solidity contracts.\\r\\n * @author Nick Johnson <arachnid@notdot.net>\\r\\n *\\r\\n * @dev Functionality in this library is largely implemented using an\\r\\n *      abstraction called a 'slice'. A slice represents a part of a string -\\r\\n *      anything from the entire string to a single character, or even no\\r\\n *      characters at all (a 0-length slice). Since a slice only has to specify\\r\\n *      an offset and a length, copying and manipulating slices is a lot less\\r\\n *      expensive than copying and manipulating the strings they reference.\\r\\n *\\r\\n *      To further reduce gas costs, most functions on slice that need to return\\r\\n *      a slice modify the original one instead of allocating a new one; for\\r\\n *      instance, `s.split(\\\".\\\")` will return the text up to the first '.',\\r\\n *      modifying s to only contain the remainder of the string after the '.'.\\r\\n *      In situations where you do not want to modify the original slice, you\\r\\n *      can make a copy first with `.copy()`, for example:\\r\\n *      `s.copy().split(\\\".\\\")`. Try and avoid using this idiom in loops; since\\r\\n *      Solidity has no memory management, it will result in allocating many\\r\\n *      short-lived slices that are later discarded.\\r\\n *\\r\\n *      Functions that return two slices come in two versions: a non-allocating\\r\\n *      version that takes the second slice as an argument, modifying it in\\r\\n *      place, and an allocating version that allocates and returns the second\\r\\n *      slice; see `nextRune` for example.\\r\\n *\\r\\n *      Functions that have to copy string data will return strings rather than\\r\\n *      slices; these can be cast back to slices for further processing if\\r\\n *      required.\\r\\n *\\r\\n *      For convenience, some functions are provided with non-modifying\\r\\n *      variants that create a new slice and return both; for instance,\\r\\n *      `s.splitNew('.')` leaves s unmodified, and returns two values\\r\\n *      corresponding to the left and right parts of the string.\\r\\n */\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary strings {\\r\\n    struct slice {\\r\\n        uint256 _len;\\r\\n        uint256 _ptr;\\r\\n    }\\r\\n\\r\\n    function memcpy(\\r\\n        uint256 dest,\\r\\n        uint256 src,\\r\\n        uint256 len\\r\\n    ) private pure {\\r\\n        // Copy word-length chunks while possible\\r\\n        for (; len >= 32; len -= 32) {\\r\\n            assembly {\\r\\n                mstore(dest, mload(src))\\r\\n            }\\r\\n            dest += 32;\\r\\n            src += 32;\\r\\n        }\\r\\n\\r\\n        // Copy remaining bytes\\r\\n        uint256 mask = 256**(32 - len) - 1;\\r\\n        assembly {\\r\\n            let srcpart := and(mload(src), not(mask))\\r\\n            let destpart := and(mload(dest), mask)\\r\\n            mstore(dest, or(destpart, srcpart))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns a slice containing the entire string.\\r\\n     * @param self The string to make a slice from.\\r\\n     * @return A newly allocated slice containing the entire string.\\r\\n     */\\r\\n    function toSlice(string memory self) internal pure returns (slice memory) {\\r\\n        uint256 ptr;\\r\\n        assembly {\\r\\n            ptr := add(self, 0x20)\\r\\n        }\\r\\n        return slice(bytes(self).length, ptr);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Copies a slice to a new string.\\r\\n     * @param self The slice to copy.\\r\\n     * @return A newly allocated string containing the slice's text.\\r\\n     */\\r\\n    function toString(slice memory self) internal pure returns (string memory) {\\r\\n        string memory ret = new string(self._len);\\r\\n        uint256 retptr;\\r\\n        assembly {\\r\\n            retptr := add(ret, 32)\\r\\n        }\\r\\n\\r\\n        memcpy(retptr, self._ptr, self._len);\\r\\n        return ret;\\r\\n    }\\r\\n\\r\\n    // Returns the memory address of the first byte of the first occurrence of\\r\\n    // `needle` in `self`, or the first byte after `self` if not found.\\r\\n    function findPtr(\\r\\n        uint256 selflen,\\r\\n        uint256 selfptr,\\r\\n        uint256 needlelen,\\r\\n        uint256 needleptr\\r\\n    ) private pure returns (uint256) {\\r\\n        uint256 ptr = selfptr;\\r\\n        uint256 idx;\\r\\n\\r\\n        if (needlelen <= selflen) {\\r\\n            if (needlelen <= 32) {\\r\\n                bytes32 mask = bytes32(~(2**(8 * (32 - needlelen)) - 1));\\r\\n\\r\\n                bytes32 needledata;\\r\\n                assembly {\\r\\n                    needledata := and(mload(needleptr), mask)\\r\\n                }\\r\\n\\r\\n                uint256 end = selfptr + selflen - needlelen;\\r\\n                bytes32 ptrdata;\\r\\n                assembly {\\r\\n                    ptrdata := and(mload(ptr), mask)\\r\\n                }\\r\\n\\r\\n                while (ptrdata != needledata) {\\r\\n                    if (ptr >= end) return selfptr + selflen;\\r\\n                    ptr++;\\r\\n                    assembly {\\r\\n                        ptrdata := and(mload(ptr), mask)\\r\\n                    }\\r\\n                }\\r\\n                return ptr;\\r\\n            } else {\\r\\n                // For long needles, use hashing\\r\\n                bytes32 hash;\\r\\n                assembly {\\r\\n                    hash := keccak256(needleptr, needlelen)\\r\\n                }\\r\\n\\r\\n                for (idx = 0; idx <= selflen - needlelen; idx++) {\\r\\n                    bytes32 testHash;\\r\\n                    assembly {\\r\\n                        testHash := keccak256(ptr, needlelen)\\r\\n                    }\\r\\n                    if (hash == testHash) return ptr;\\r\\n                    ptr += 1;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        return selfptr + selflen;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Splits the slice, setting `self` to everything after the first\\r\\n     *      occurrence of `needle`, and `token` to everything before it. If\\r\\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\\r\\n     *      and `token` is set to the entirety of `self`.\\r\\n     * @param self The slice to split.\\r\\n     * @param needle The text to search for in `self`.\\r\\n     * @param token An output parameter to which the first token is written.\\r\\n     * @return `token`.\\r\\n     */\\r\\n    function split(\\r\\n        slice memory self,\\r\\n        slice memory needle,\\r\\n        slice memory token\\r\\n    ) internal pure returns (slice memory) {\\r\\n        uint256 ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr);\\r\\n        token._ptr = self._ptr;\\r\\n        token._len = ptr - self._ptr;\\r\\n        if (ptr == self._ptr + self._len) {\\r\\n            // Not found\\r\\n            self._len = 0;\\r\\n        } else {\\r\\n            self._len -= token._len + needle._len;\\r\\n            self._ptr = ptr + needle._len;\\r\\n        }\\r\\n        return token;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Splits the slice, setting `self` to everything after the first\\r\\n     *      occurrence of `needle`, and returning everything before it. If\\r\\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\\r\\n     *      and the entirety of `self` is returned.\\r\\n     * @param self The slice to split.\\r\\n     * @param needle The text to search for in `self`.\\r\\n     * @return The part of `self` up to the first occurrence of `delim`.\\r\\n     */\\r\\n    function split(slice memory self, slice memory needle)\\r\\n        internal\\r\\n        pure\\r\\n        returns (slice memory token)\\r\\n    {\\r\\n        split(self, needle, token);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xc081a98a7e76c9527ced5288f0e1fcbfb06dafd950af4cdb1d160054ea27a0f8\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162005fe738038062005fe783398101604081905262000034916200029d565b604080518082018252600a815269536861646f776c696e6760b01b6020808301918252835180850190945260048452635348445760e01b9084015281519192916200008291600091620001f7565b50805162000098906001906020840190620001f7565b505050620000b5620000af620000cc60201b60201c565b620000d0565b6001600c55620000c58162000122565b506200030c565b3390565b600b80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600b546001600160a01b03163314620001825760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6001600160a01b038116620001e95760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840162000179565b620001f481620000d0565b50565b8280546200020590620002cf565b90600052602060002090601f01602090048101928262000229576000855562000274565b82601f106200024457805160ff191683800117855562000274565b8280016001018555821562000274579182015b828111156200027457825182559160200191906001019062000257565b506200028292915062000286565b5090565b5b8082111562000282576000815560010162000287565b600060208284031215620002b057600080fd5b81516001600160a01b0381168114620002c857600080fd5b9392505050565b600181811c90821680620002e457607f821691505b602082108114156200030657634e487b7160e01b600052602260045260246000fd5b50919050565b615ccb806200031c6000396000f3fe608060405234801561001057600080fd5b50600436106101795760003560e01c806385d05887116100d9578063d05dcc6a11610087578063d05dcc6a14610366578063dd77868614610379578063ddd5e1b21461038c578063e8a3d4851461039f578063e985e9c5146103a7578063f2fde38b146103ba578063f7b10808146103cd57600080fd5b806385d05887146102f75780638da5cb5b1461030a57806395d89b4114610312578063a22cb4651461031a578063b88d4fde1461032d578063c77eefa614610340578063c87b56dd1461035357600080fd5b80632f745c59116101365780632f745c591461022057806342842e0e146102335780634f6ccce714610246578063606cf27e146102595780636352211e146102c957806370a08231146102dc578063715018a6146102ef57600080fd5b806301ffc9a71461017e57806306fdde03146101a6578063081812fc146101bb578063095ea7b3146101e657806318160ddd146101fb57806323b872dd1461020d575b600080fd5b61019161018c366004613d0d565b6103ed565b60405190151581526020015b60405180910390f35b6101ae610418565b60405161019d9190614551565b6101ce6101c9366004613d47565b6104aa565b6040516001600160a01b03909116815260200161019d565b6101f96101f4366004613ce3565b610537565b005b6008545b60405190815260200161019d565b6101f961021b366004613b8f565b610648565b6101ff61022e366004613ce3565b610679565b6101f9610241366004613b8f565b61070f565b6101ff610254366004613d47565b61072a565b61029c610267366004613d47565b600a60205260009081526040902080546001820154600283015460038401546004850154600590950154939492939192909186565b604080519687526020870195909552938501929092526060840152608083015260a082015260c00161019d565b6101ce6102d7366004613d47565b6107bd565b6101ff6102ea366004613b41565b610834565b6101f96108bb565b6101f9610305366004613d83565b6108f6565b6101ce610b1a565b6101ae610b29565b6101f9610328366004613ca7565b610b38565b6101f961033b366004613bcb565b610bf9565b6101f961034e366004613d60565b610c31565b6101ae610361366004613d47565b610cfe565b6101ae610374366004613d47565b610d86565b6101ae610387366004613d47565b610d99565b6101f961039a366004613d60565b610da4565b6101ae610e5f565b6101916103b5366004613b5c565b610eb6565b6101f96103c8366004613b41565b610ee4565b6103e06103db366004613d47565b610f84565b60405161019d9190614673565b60006001600160e01b0319821663780e9d6360e01b1480610412575061041282610fee565b92915050565b606060008054610427906148a4565b80601f0160208091040260200160405190810160405280929190818152602001828054610453906148a4565b80156104a05780601f10610475576101008083540402835291602001916104a0565b820191906000526020600020905b81548152906001019060200180831161048357829003601f168201915b5050505050905090565b60006104b58261103e565b61051b5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b6000610542826107bd565b9050806001600160a01b0316836001600160a01b031614156105b05760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610512565b336001600160a01b03821614806105cc57506105cc8133610eb6565b6106395760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776044820152771b995c881b9bdc88185c1c1c9bdd995908199bdc88185b1b60421b6064820152608401610512565b610643838361105b565b505050565b61065233826110c9565b61066e5760405162461bcd60e51b8152600401610512906145eb565b610643838383611193565b600061068483610834565b82106106e65760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610512565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b61064383838360405180602001604052806000815250610bf9565b600061073560085490565b82106107985760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610512565b600882815481106107ab576107ab614950565b90600052602060002001549050919050565b6000818152600260205260408120546001600160a01b0316806104125760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610512565b60006001600160a01b03821661089f5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610512565b506001600160a01b031660009081526003602052604090205490565b336108c4610b1a565b6001600160a01b0316146108ea5760405162461bcd60e51b8152600401610512906145b6565b6108f4600061133e565b565b6002600c5414156109195760405162461bcd60e51b81526004016105129061463c565b6002600c5533610927610b1a565b6001600160a01b03161461094d5760405162461bcd60e51b8152600401610512906145b6565b6000828152600a60209081526040808320815160c081018352815481526001820154938101939093526002810154918301919091526003810154606083018190526004820154608084015260059091015460a08301529091906109af90611390565b905060006109bd85836113ac565b905060006109ca82611402565b905060006109d7866115d7565b826040516020016109e99291906142f0565b6040516020818303038152906040528051906020012060001c9050610a0c613a51565b85518152602080870151908201526080860151604082015260a08601516060820152610a398782846116d5565b8051909150610a49576000610a54565b8051610a5490611b1a565b86526020810151610a66576000610a74565b6020810151610a7490611b2f565b60208701526040810151610a89576000610a97565b6040810151610a9790611b44565b60808701526060810151610aac576000610aba565b6060810151610aba90611b59565b60a087019081526000988952600a60209081526040998a9020885181559088015160018083019190915599880151600282015560608801516003820155608090970151600488015551600590960195909555505050600c93909355505050565b600b546001600160a01b031690565b606060018054610427906148a4565b6001600160a01b038216331415610b8d5760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b6044820152606401610512565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b610c0333836110c9565b610c1f5760405162461bcd60e51b8152600401610512906145eb565b610c2b84848484611b6e565b50505050565b6002600c541415610c545760405162461bcd60e51b81526004016105129061463c565b6002600c5533610c62610b1a565b6001600160a01b031614610c885760405162461bcd60e51b8152600401610512906145b6565b6000610c9383611ba1565b9050610ca0836001611c3e565b60408083019182526000858152600a60209081529190208351815590830151600182015590516002820155606082015160038201556080820151600482015560a0820151600590910155610cf48284611c5b565b50506001600c5550565b60606000610d0b83610f84565b90506000610d1884611c79565b90506000610d57610d298484611dd9565b610d3285611fd7565b604051602001610d439291906141fc565b604051602081830303815290604052612166565b9050600081604051602001610d6c9190614467565b60408051601f198184030181529190529695505050505050565b6060610412610d9483610f84565b611fd7565b6060610412826122cc565b6002600c541415610dc75760405162461bcd60e51b81526004016105129061463c565b6002600c5533610dd5610b1a565b6001600160a01b031614610dfb5760405162461bcd60e51b8152600401610512906145b6565b610e0482611ba1565b6000838152600a602090815260409182902083518155908301516001820155908201516002820155606082015160038201556080820151600482015560a090910151600590910155610e568183611c5b565b50506001600c55565b606060006040518060c0016040528060818152602001614fa26081913990506000610e8982612166565b9050600081604051602001610e9e9190614467565b60408051601f19818403018152919052949350505050565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b33610eed610b1a565b6001600160a01b031614610f135760405162461bcd60e51b8152600401610512906145b6565b6001600160a01b038116610f785760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610512565b610f818161133e565b50565b610f8c613a6f565b610412600a60008481526020019081526020016000206040518060c001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815250506125a8565b60006001600160e01b031982166380ac58cd60e01b148061101f57506001600160e01b03198216635b5e139f60e01b145b8061041257506301ffc9a760e01b6001600160e01b0319831614610412565b6000908152600260205260409020546001600160a01b0316151590565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611090826107bd565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006110d48261103e565b6111355760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610512565b6000611140836107bd565b9050806001600160a01b0316846001600160a01b0316148061117b5750836001600160a01b0316611170846104aa565b6001600160a01b0316145b8061118b575061118b8185610eb6565b949350505050565b826001600160a01b03166111a6826107bd565b6001600160a01b03161461120e5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610512565b6001600160a01b0382166112705760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610512565b61127b838383612622565b61128660008261105b565b6001600160a01b03831660009081526003602052604081208054600192906112af908490614861565b90915550506001600160a01b03821660009081526003602052604081208054600192906112dd90849061472b565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600b80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b606060008061139e846126da565b9150915061118b8282612745565b6000806113b8846128ac565b836040516020016113ca9291906144ee565b60408051808303601f190181528282528051602091820120818401528151808403820181529282019091528151910120949350505050565b606061140c613aa5565b60326114196064856148fa565b11611425576000611428565b60015b815260c36114386101f4856148fa565b11611444576002611447565b60015b602082015261068361145b6107d0856148fa565b1161146757600061146a565b60025b604082015280516001148015611481575080516001145b61148c57600161148f565b60005b60608201526020810151156114a55760016114a8565b60035b6080820152602081015160031480156114cd57506106836114cb6107d0856148fa565b115b6114d85760006114db565b60015b60a0820152805160011480156114f057508051155b6114fb5760016114fe565b60005b60c08201526040810151600114611516576001611519565b60035b60e08201526060810151600114611531576001611534565b60005b816008602002015260008181602002015182600160200201518360026020020151846003602002015185600460200201518660056020020151876006602002015188600760200201518960086020020151604051602001610e9e99989796959493929190988952602089019790975260408801959095526060870193909352608086019190915260a085015260c084015260e08301526101008201526101200190565b6060816115fb5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611625578061160f816148df565b915061161e9050600a83614743565b91506115ff565b60008167ffffffffffffffff81111561164057611640614966565b6040519080825280601f01601f19166020018201604052801561166a576020820181803683370190505b5090505b841561118b5761167f600183614861565b915061168c600a866148fa565b61169790603061472b565b60f81b8183815181106116ac576116ac614950565b60200101906001600160f81b031916908160001a9053506116ce600a86614743565b945061166e565b6116dd613a51565b6116e9612710836148fa565b9150600460006116f885612950565b905060078614156117ea57806001146117245760405163fd88b53d60e01b815260040160405180910390fd5b60005b828110156117e857600086826004811061174357611743614950565b60200201519050611755600185614861565b82141561178657611783604051806040016040528060058152602001640534c4f54360dc1b815250876129a9565b87525b80156117d5576117b360405180604001604052806005815260200164534c4f543160d81b815250876129a9565b876117bf84600161472b565b600481106117cf576117cf614950565b60200201525b50806117e0816148df565b915050611727565b505b600886141561189357806003146118145760405163fd88b53d60e01b815260040160405180910390fd5b60005b8281101561189157600086826004811061183357611833614950565b602002015190508061187e5761186660405180604001604052806005815260200164534c4f543160d81b815250876129a9565b87836004811061187857611878614950565b60200201525b5080611889816148df565b915050611817565b505b60068614156118f75760005b828110156118f55760008682600481106118bb576118bb614950565b6020020151905080156118e25760008783600481106118dc576118dc614950565b60200201525b50806118ed816148df565b91505061189f565b505b60048614156119a357801561191f5760405163fd88b53d60e01b815260040160405180910390fd5b61138884111561195a5761195060405180604001604052806005815260200164534c4f543160d81b815250856129a9565b60208601526119a3565b6119816040518060400160405280600581526020016429a627aa1960d91b815250856129a9565b8561198d600185614861565b6004811061199d5761199d614950565b60200201525b6005861415611a515780156119cb5760405163fd88b53d60e01b815260040160405180910390fd5b60005b82811015611a4f576123288511156119fe5760008682600481106119f4576119f4614950565b6020020152611a3d565b611a2560405180604001604052806005815260200164534c4f543160d81b815250866129a9565b868260048110611a3757611a37614950565b60200201525b80611a47816148df565b9150506119ce565b505b6002861415611abb57612328841115611a7657611a6f8460016129b8565b9450611abb565b6101f4841015611a8b57611a6f8460026129b8565b61232884108015611a9d5750611b5884115b15611aad57611a6f8460036129b8565b611ab88460046129b8565b94505b6003861415611b10576002811115611ae65760405163fd88b53d60e01b815260040160405180910390fd5b611388841115611b0257611afb8460016129b8565b9450611b10565b611b0d8460026129b8565b94505b5092949350505050565b6000610412611b2883612ac6565b6000612afa565b6000610412611b3d83612b8e565b6001612afa565b6000610412611b5283612bbe565b6004612afa565b6000610412611b6783612bf1565b6005612afa565b611b79848484611193565b611b8584848484612c21565b610c2b5760405162461bcd60e51b815260040161051290614564565b611bda6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518060c00160405280611bee84611b1a565b8152602001611bfc84611b2f565b8152602001611c0c846000611c3e565b8152602001611c1a84612d2e565b8152602001611c2884611b44565b8152602001611c3684611b59565b905292915050565b6000611c54611c4d8484612d43565b6002612afa565b9392505050565b611c75828260405180602001604052806000815250612dac565b5050565b6060611c83613ac4565b611c8c83612ddf565b81526040805160608101909152602980825261504c60208301396020820152611cb483612e0b565b6040808301919091528051606081019091526029808252615b8f60208301396060820152611ce183612e38565b6080820152604080516060810190915260298082526150ef602083013960a0820152611d0c83612e68565b60c082015260408051606081019091526029808252615023602083013960e0820152611d3783612e98565b610100820152604080516060810190915260298082526151186020830139610120820152611d6483612ec2565b61014082015280516020808301516040808501516060860151608087015160a088015160c089015160e08a01516101008b0151965160009a611daa9a9099989101613eca565b60408051808303601f1901815290829052610120840151610140850151919350610e9e92849290602001613e1c565b6060611de3613aec565b60405180610120016040528060fd815260200161524d60fd913981528351602080830191909152604080516060810190915260288082529091615a399083013960408201526020840151816003602002018190525060405180606001604052806028815260200161499360289139608082015260408481015160a0830152805160608101909152602880825261509e602083013960c082015260608481015160e083015260408051918201905260298082526150c66020830139610100820152608084015161012082015260408051606081019091526029808252615075602083013961014082015260a0840151610160820152604080516060810190915260298082526154ff602083013961018082015280516020808301516040808501516060860151608087015160a088015160c089015160e08a01516101008b0151965160009a611f359a9099989101613eca565b60408051808303601f1901815290829052610120840151610140850151610160860151610180870151939550611f7094869490602001613e5f565b60405160208183030381529060405290508084604051602001611f94929190614001565b6040516020818303038152906040529050611fae81612166565b604051602001611fbe9190614334565b60408051808303601f1901815291905295945050505050565b6060806000611ff0611fe96000612eee565b8551612f12565b6040516020016120009190614393565b60405160208183030381529060405290508061202961201f6001612eee565b8660200151612f12565b60405160200161203a92919061411f565b6040516020818303038152906040529050806120636120596002612eee565b8660400151612f12565b60405160200161207492919061411f565b60405160208183030381529060405290508061209d6120936003612eee565b8660600151612f12565b6040516020016120ae92919061411f565b6040516020818303038152906040529050806120d76120cd6004612eee565b8660800151612f12565b6040516020016120e892919061411f565b6040516020818303038152906040529050806121116121076005612eee565b8660a00151612f12565b60405160200161212292919061411f565b60405160208183030381529060405290508060405160200161214491906140fa565b604051602081830303815290604052905080604051602001610e9e91906144ac565b805160609080612186575050604080516020810190915260008152919050565b6000600361219583600261472b565b61219f9190614743565b6121aa906004614842565b905060006121b982602061472b565b67ffffffffffffffff8111156121d1576121d1614966565b6040519080825280601f01601f1916602001820160405280156121fb576020820181803683370190505b5090506000604051806060016040528060408152602001615528604091399050600181016020830160005b86811015612287576003818a01810151603f601282901c8116860151600c83901c8216870151600684901c831688015192909316870151600891821b60ff94851601821b92841692909201901b91160160e01b835260049092019101612226565b5060038606600181146122a157600281146122b2576122be565b613d3d60f01b6001198301526122be565b603d60f81b6000198301525b505050918152949350505050565b60606000806122da846126da565b9150915060006122e982612eee565b905060006123136040518060400160405280600481526020016314db1bdd60e21b81525083612f12565b6040516020016123239190614393565b60408051601f19818403018152919052905060006123488486835b6020020151612f3e565b905081612371604051806040016040528060048152602001634974656d60e01b81525083612f12565b60405160200161238292919061411f565b60408051808303601f1901815291905260208601519092501561240b5760006123bc6001878160200201516123b79190614861565b613087565b9050826123e7604051806040016040528060068152602001650a6eaccccd2f60d31b81525083612f12565b6040516020016123f892919061411f565b6040516020818303038152906040529250505b60408501511561248857600061243460018760025b602002015161242f9190614861565b6130ae565b9050826124646040518060400160405280600b81526020016a09cc2daca40a0e4caccd2f60ab1b81525083612f12565b60405160200161247592919061411f565b6040516020818303038152906040529250505b6060850151156125055760006124b160018760035b60200201516124ac9190614861565b6130d5565b9050826124e16040518060400160405280600b81526020016a09cc2daca40a6eaccccd2f60ab1b81525083612f12565b6040516020016124f292919061411f565b6040516020818303038152906040529250505b60808501511561257c57816125596040518060400160405280600c81526020016b20bab3b6b2b73a30ba34b7b760a11b8152506040518060400160405280600381526020016259657360e81b815250612f12565b60405160200161256a92919061411f565b60405160208183030381529060405291505b8160405160200161258d91906140fa565b60408051601f19818403018152919052979650505050505050565b6125b0613a6f565b6040518060c001604052806125c88460000151611390565b81526020016125da8460200151611390565b81526020016125ec8460400151611390565b81526020016125fe8460600151611390565b81526020016126108460800151611390565b8152602001611c368460a00151611390565b6001600160a01b03831661267d5761267881600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b6126a0565b816001600160a01b0316836001600160a01b0316146126a0576126a083826130fa565b6001600160a01b0382166126b75761064381613197565b826001600160a01b0316826001600160a01b031614610643576106438282613246565b6126e2613b07565b60006126ef83600061328a565b90506126fc83600161328a565b825261270983600261328a565b602083015261271983600361328a565b604083015261272983600461328a565b606083015261273983600561328a565b60808301529092909150565b6060600061275483858361233e565b6020850151909150156127ba57806127976040518061014001604052806101038152602001615a616101039139602087015161279290600190614861565b6132a5565b6040516020016127a89291906140be565b60405160208183030381529060405290505b6040840151156128795760006127d36001866002612420565b6040516020016127e391906143bc565b60408051808303601f19018152919052606086015190915015612831578061280e600187600361249d565b60405160200161281f9291906140be565b60405160208183030381529060405290505b8060405160200161284291906141b4565b60405160208183030381529060405290508082604051602001612866929190613ded565b6040516020818303038152906040529150505b608084015115611c545780604051602001612894919061415c565b60405160208183030381529060405290509392505050565b600080424332335a8743406045436128c49190614861565b6040805160208101999099528801969096526bffffffffffffffffffffffff19606095861b8116868901529390941b9092166074860152608885015260a884015260c88301524060e88201526101080160408051601f198184030181528282528051602091820120908301520160408051601f1981840301815291905280516020909101209392505050565b6000600481805b828110156129a157600085826004811061297357612973614950565b60200201519050801561298e578261298a816148df565b9350505b5080612999816148df565b915050612957565b509392505050565b6000611c548383612710613334565b6129c0613a51565b6129c8613a51565b6040805180820190915260058152640534c4f54360dc1b60208201526001906129f190866129a9565b8252838110612a0257509050610412565b80612a0c816148df565b915050612a3660405180604001604052806005815260200164534c4f543160d81b815250866129a9565b6020830152838110612a4a57509050610412565b80612a54816148df565b915050612a7e6040518060400160405280600581526020016429a627aa1960d91b815250866129a9565b6040830152838110612a9257509050610412565b612ab960405180604001604052806005815260200164534c4f543360d81b815250866129a9565b6060830152509392505050565b612ace613b07565b6104128260405180604001604052806008815260200167435245415455524560c01b815250602f61336b565b81516000908290612b0c90600161344a565b612b16908261472b565b9050612b2a8460016020020151600261344a565b612b34908261472b565b9050612b488460026020020151600361344a565b612b52908261472b565b9050612b668460036020020151600461344a565b612b70908261472b565b9050612b848460046020020151600561344a565b61118b908261472b565b612b96613b07565b6104128260405180604001604052806004815260200163464c415760e01b815250601461336b565b612bc6613b07565b61041282604051806040016040528060078152602001664142494c49545960c81b815250601261336b565b612bf9613b07565b61041282604051806040016040528060048152602001634e414d4560e01b81525060ba61336b565b60006001600160a01b0384163b15612d2357604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290612c65903390899088908890600401614514565b602060405180830381600087803b158015612c7f57600080fd5b505af1925050508015612caf575060408051601f3d908101601f19168201909252612cac91810190613d2a565b60015b612d09573d808015612cdd576040519150601f19603f3d011682016040523d82523d6000602084013e612ce2565b606091505b508051612d015760405162461bcd60e51b815260040161051290614564565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061118b565b506001949350505050565b6000610412612d3c83613465565b6003612afa565b612d4b613b07565b8115612d8257612d7b836040518060400160405280600681526020016527a924a3a4a760d11b815250600561336b565b9050610412565b611c54836040518060400160405280600681526020016527a924a3a4a760d11b815250600e61336b565b612db6838361349a565b612dc36000848484612c21565b6106435760405162461bcd60e51b815260040161051290614564565b606061041282604051806040016040528060088152602001670a6a8a48a9c8ea8960c31b8152506135d9565b6060610412826040518060400160405280600981526020016844455854455249545960b81b8152506135d9565b6060610412826040518060400160405280600c81526020016b21a7a729aa24aa2aaa24a7a760a11b8152506135d9565b6060610412826040518060400160405280600c81526020016b494e54454c4c4947454e434560a01b8152506135d9565b60606104128260405180604001604052806006815260200165574953444f4d60d01b8152506135d9565b606061041282604051806040016040528060088152602001674348415249534d4160c01b8152506135d9565b60606104126040518060600160405280602b8152602001615b64602b9139836132a5565b60608282604051602001612f279291906143d8565b604051602081830303815290604052905092915050565b60608083612f6957604051806102a0016040528061027481526020016155686102749139905061307d565b6001841415612f935760405180610100016040528060c8815260200161543760c89139905061307d565b6002841415612fbd5760405180610100016040528060d881526020016149bb60d89139905061307d565b6003841415612fe95760405180610140016040528061010c815260200161514161010c9139905061307d565b60048414156130135760405180610120016040528060ed815260200161534a60ed9139905061307d565b600584141561303f5760405180610540016040528061050f8152602001614a9361050f9139905061307d565b60405162461bcd60e51b8152602060048201526013602482015272556e65787065637465642070726f706572747960681b6044820152606401610512565b61118b81846132a5565b60606104126040518061014001604052806101038152602001615a616101039139836132a5565b606061041260405180610280016040528061025d81526020016157dc61025d9139836132a5565b606061041260405180610100016040528060de8152602001615bb860de9139836132a5565b6000600161310784610834565b6131119190614861565b600083815260076020526040902054909150808214613164576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b6008546000906131a990600190614861565b600083815260096020526040812054600880549394509092849081106131d1576131d1614950565b9060005260206000200154905080600883815481106131f2576131f2614950565b600091825260208083209091019290925582815260099091526040808220849055858252812055600880548061322a5761322a61493a565b6001900381819060005260206000200160009055905550505050565b600061325183610834565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b6000613297826010614842565b83901c60ff16905092915050565b606060006132b284613715565b6040805180820190915260018152600b60fa1b602082015290915060006132d882613715565b90506132f7604051806040016040528060008152602001600081525090565b60005b86811161331f5761330b8584613742565b915080613317816148df565b9150506132fa565b5061332981613768565b979650505050505050565b600081613361858560405160200161334d9291906141da565b6040516020818303038152906040526137d1565b61118b91906148fa565b613373613b07565b61337b613b07565b600061339b8561338a886115d7565b60405160200161334d929190613ded565b90506133a784826148fa565b8252600060208301819052604083018190526133c46015836148fa565b9050600e8111156133eb576133da6015836148fa565b6133e590600161472b565b60208401525b6013811061343f576133fe6050836148fa565b61340990600161472b565b6040840152613419601f836148fa565b61342490600161472b565b606084015260138114156134375761343f565b600160808401525b509095945050505050565b6000613457826010614842565b8360ff16901b905092915050565b61346d613b07565b6104128260405180604001604052806009815260200168424c4f4f444c494e4560b81b815250602161336b565b6001600160a01b0382166134f05760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610512565b6134f98161103e565b156135465760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610512565b61355260008383612622565b6001600160a01b038216600090815260036020526040812080546001929061357b90849061472b565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6060600061360f836135ea866115d7565b6040516020016135fb929190614083565b604051602081830303815290604052613802565b905080600061363285613621886115d7565b6040516020016135fb929190614048565b90508082116136415781613643565b805b9150600061366586613654896115d7565b6040516020016135fb929190613fc6565b90508083116136745782613676565b805b92506000613698876136878a6115d7565b6040516020016135fb929190613f8b565b90508084116136a757836136a9565b805b935060008482846136ba878a61472b565b6136c4919061472b565b6136ce919061472b565b6136d89190614861565b90506000886136e6836115d7565b6040516020016136f7929190614183565b60408051808303601f190181529190529a9950505050505050505050565b60408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b6040805180820190915260008082526020820152613761838383613824565b5092915050565b60606000826000015167ffffffffffffffff81111561378957613789614966565b6040519080825280601f01601f1916602001820160405280156137b3576020820181803683370190505b509050600060208201905061376181856020015186600001516138d0565b6000816040516020016137e49190613dd1565b60408051601f19818403018152919052805160209091012092915050565b6000600661380f836137d1565b61381991906148fa565b61041290600161472b565b604080518082019091526000808252602082015260006138568560000151866020015186600001518760200151613941565b6020808701805191860191909152519091506138729082614861565b835284516020860151613885919061472b565b81141561389557600085526138c7565b835183516138a3919061472b565b855186906138b2908390614861565b90525083516138c1908261472b565b60208601525b50909392505050565b6020811061390857815183526138e760208461472b565b92506138f460208361472b565b9150613901602082614861565b90506138d0565b60006001613917836020614861565b6139239061010061479a565b61392d9190614861565b925184518416931916929092179092525050565b60008381868511613a4757602085116139f55760006001613963876020614861565b61396e906008614842565b61397990600261479a565b6139839190614861565b85519019915081166000876139988b8b61472b565b6139a29190614861565b855190915083165b8281146139e7578186106139cf576139c28b8b61472b565b965050505050505061118b565b856139d9816148df565b9650508386511690506139aa565b85965050505050505061118b565b508383206000905b613a078689614861565b8211613a455785832081811415613a24578394505050505061118b565b613a2f60018561472b565b9350508180613a3d906148df565b9250506139fd565b505b613329878761472b565b60405180608001604052806004906020820280368337509192915050565b6040518060c001604052806060815260200160608152602001606081526020016060815260200160608152602001606081525090565b6040518061012001604052806009906020820280368337509192915050565b604051806101600160405280600b905b6060815260200190600190039081613ad45790505090565b604080516101a0810190915260608152600c60208201613ad4565b6040518060a001604052806005906020820280368337509192915050565b80356001600160a01b0381168114613b3c57600080fd5b919050565b600060208284031215613b5357600080fd5b611c5482613b25565b60008060408385031215613b6f57600080fd5b613b7883613b25565b9150613b8660208401613b25565b90509250929050565b600080600060608486031215613ba457600080fd5b613bad84613b25565b9250613bbb60208501613b25565b9150604084013590509250925092565b60008060008060808587031215613be157600080fd5b613bea85613b25565b9350613bf860208601613b25565b925060408501359150606085013567ffffffffffffffff80821115613c1c57600080fd5b818701915087601f830112613c3057600080fd5b813581811115613c4257613c42614966565b604051601f8201601f19908116603f01168101908382118183101715613c6a57613c6a614966565b816040528281528a6020848701011115613c8357600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060408385031215613cba57600080fd5b613cc383613b25565b915060208301358015158114613cd857600080fd5b809150509250929050565b60008060408385031215613cf657600080fd5b613cff83613b25565b946020939093013593505050565b600060208284031215613d1f57600080fd5b8135611c548161497c565b600060208284031215613d3c57600080fd5b8151611c548161497c565b600060208284031215613d5957600080fd5b5035919050565b60008060408385031215613d7357600080fd5b82359150613b8660208401613b25565b60008060408385031215613d9657600080fd5b50508035926020909101359150565b60008151808452613dbd816020860160208601614878565b601f01601f19169290920160200192915050565b60008251613de3818460208701614878565b9190910192915050565b60008351613dff818460208801614878565b835190830190613e13818360208801614878565b01949350505050565b60008451613e2e818460208901614878565b845190830190613e42818360208901614878565b8451910190613e55818360208801614878565b0195945050505050565b60008651613e71818460208b01614878565b865190830190613e85818360208b01614878565b8651910190613e98818360208a01614878565b8551910190613eab818360208901614878565b8451910190613ebe818360208801614878565b01979650505050505050565b60008a51613edc818460208f01614878565b8a51613eee8183860160208f01614878565b8a519184010190613f03818360208e01614878565b8951613f158183850160208e01614878565b8951929091010190613f2b818360208c01614878565b8751613f3d8183850160208c01614878565b8751929091010190613f53818360208a01614878565b8551613f658183850160208a01614878565b8551929091010190613f7b818360208801614878565b019b9a5050505050505050505050565b60008351613f9d818460208801614878565b835190830190613fb1818360208801614878565b600d60fa1b9101908152600101949350505050565b60008351613fd8818460208801614878565b835190830190613fec818360208801614878565b603360f81b9101908152600101949350505050565b60008351614013818460208801614878565b835190830190614027818360208801614878565b6c1e17ba32bc3a1f1e17b9bb339f60991b9101908152600d01949350505050565b6000835161405a818460208801614878565b83519083019061406e818360208801614878565b601960f91b9101908152600101949350505050565b60008351614095818460208801614878565b8351908301906140a9818360208801614878565b603160f81b9101908152600101949350505050565b600083516140d0818460208801614878565b600160fd1b90830190815283516140ee816001840160208801614878565b01600101949350505050565b6000825161410c818460208701614878565b605d60f81b920191825250600101919050565b60008351614131818460208801614878565b61016160f51b9083019081528351614150816002840160208801614878565b01600201949350505050565b6000825161416e818460208701614878565b62202b3160e81b920191825250600301919050565b60008351614195818460208801614878565b6101d160f51b9083019081528351614150816002840160208801614878565b600082516141c6818460208701614878565b61013960f51b920191825250600201919050565b600083516141ec818460208801614878565b9190910191825250602001919050565b6a3d90113730b6b2911d101160a91b815269536861646f776c696e6760b01b600b8201526201116160ed1b60158201526f0113232b9b1b934b83a34b7b711101d160851b60188201527f22536861646f776c696e677320666f6c6c6f7720796f7520696e20796f75722060288201527f6a6f75726e6579206163726f737320636861696e73706163652c20746865207360488201527f6861646f77636861696e2c20616e64206265796f6e642e2e2e222c2000000000606882015282516000906142cd816084850160208801614878565b8351908301906142e4816084840160208801614878565b01608401949350505050565b654d4f4449465960d01b815260008351614311816006850160208801614878565b835190830190614328816006840160208801614878565b01600601949350505050565b7f22696d616765223a2022646174613a696d6167652f7376672b786d6c3b626173815263194d8d0b60e21b602082015260008251614379816024850160208701614878565b6201116160ed1b6024939091019283015250602701919050565b605b60f81b8152600082516143af816001850160208701614878565b9190910160010192915050565b602760f81b8152600082516143af816001850160208701614878565b607b60f81b81526e113a3930b4ba2fba3cb832911d101160891b6001820152825160009061440d816010850160208801614878565b6201116160ed1b60109184019182015269113b30b63ab2911d101160b11b6013820152835161444381601d840160208801614878565b601160f91b601d9290910191820152607d60f81b601e820152601f01949350505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000081526000825161449f81601d850160208701614878565b91909101601d0192915050565b6d01130ba3a3934b13aba32b9911d160951b815281516000906144d681600e850160208701614878565b607d60f81b600e939091019283015250600f01919050565b82815260008251614506816020850160208701614878565b919091016020019392505050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061454790830184613da5565b9695505050505050565b602081526000611c546020830184613da5565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b602081526000825160c0602084015261468f60e0840182613da5565b90506020840151601f19808584030160408601526146ad8383613da5565b925060408601519150808584030160608601526146ca8383613da5565b925060608601519150808584030160808601526146e78383613da5565b925060808601519150808584030160a08601526147048383613da5565b925060a08601519150808584030160c0860152506147228282613da5565b95945050505050565b6000821982111561473e5761473e61490e565b500190565b60008261475257614752614924565b500490565b600181815b808511156147925781600019048211156147785761477861490e565b8085161561478557918102915b93841c939080029061475c565b509250929050565b6000611c5483836000826147b057506001610412565b816147bd57506000610412565b81600181146147d357600281146147dd576147f9565b6001915050610412565b60ff8411156147ee576147ee61490e565b50506001821b610412565b5060208310610133831016604e8410600b841016171561481c575081810a610412565b6148268383614757565b806000190482111561483a5761483a61490e565b029392505050565b600081600019048311821515161561485c5761485c61490e565b500290565b6000828210156148735761487361490e565b500390565b60005b8381101561489357818101518382015260200161487b565b83811115610c2b5750506000910152565b600181811c908216806148b857607f821691505b602082108114156148d957634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156148f3576148f361490e565b5060010190565b60008261490957614909614924565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b031981168114610f8157600080fdfe3c2f746578743e3c7465787420783d2231302220793d2236302220636c6173733d2262617365223e536861646f776b61696e277320446f6d61696e2c4b756c6563686f767320446f6d696e696f6e202c506572696c6f7573204661726d732c4f6365616e73206f6620446567656e2054656172732c4461726b20466f726573742c4d656d706f6f6c2c536861646f77636861696e2c506f6c79676f6e616c204d65736873706163652c4c616e6473206f6620417262697472617279204f7074696d69736d2c436861696e73706163652c436861696e73206f66204e617a61726f762c426c7565204c61676f6f6e2c5377616d702c47656e6573697320437562655361746f7368692c566974616c696b2c566c61642c4164616d2c41696c6d61722c44617266696e2c4a6861616e2c5a61626261732c4e656c646f722c47616e646f722c42656c6c61732c446165616c6c612c4e796d2c56657372796e2c416e676f722c476f67752c4d616c6f6b2c526f746e616d2c4368616c69612c41737472612c46616269656e2c4f72696f6e2c5175696e7475732c52656d75732c526f72696b2c5369726975732c537962656c6c612c417a7572612c446f726174682c46726579612c4f7068656c69612c5976616e6e612c5a656e6979612c4a616d65732c526f626572742c4a6f686e2c4d69636861656c2c57696c6c69616d2c44617669642c526963686172642c4a6f736570682c54686f6d61732c436861726c65732c4d6172792c50617472696369612c4a656e6e696665722c4c696e64612c456c697a61626574682c426172626172612c537573616e2c4a6573736963612c53617261682c4b6172656e2c44696c6962652c4576612c4d6174746865772c426f6c657468652c506f6c79636172702c416d62726f67696e6f2c4a6972692c4368756b77756562756b612c4368696e6f6e79656c756d2c4d696b61656c2c4d6972612c416e69656c612c53616d75656c2c4973616b2c417263686962616c646f2c4368696e79656c752c4b65727374696e2c4162696761696c2c4f6c796d7069612c47726163652c4e6168756d2c456c697361626574682c53657267652c537567616b6f2c5061747269636b2c466c6f7275732c537661746176612c496c6f6e612c4c6163686c616e2c4361737069616e2c46696c697070612c5061756c6f2c44617264612c4c696e64612c477261646173736f2c4361726c792c4a656e732c42657474792c45626f6e792c44656e6e69732c4d617274696e204461766f72696e2c4c617572612c4a65737065722c52656d792c4f6e79656b616368756b77752c4a616e2c44696f73636f726f2c48696c6172696a2c526f73766974612c4e6f61682c5061747269636b2c4d6f68616d6d65642c4368696e77656d6d612c526166662c41726f6e2c4d696775656c2c447a656d61696c2c476177656c2c477573746176652c45667261696d2c4164656c626572742c4a6f64792c4d61636b656e7a69652c566963746f7269612c53656c616d2c4a656e63692c556c726963682c43686973686f752c446f6d6f6e6b6f732c5374616e69736c6175732c466f7274696e627261732c47656f7267652c44616e69656c2c416e6e6162656c6c652c5368756e696368692c426f6764616e2c416e617374617a6a612c4d61726375732c4d6f6e6963612c4d617274696e2c5975756b6f752c486172726965742c47656f66667265792c4a6f6e61732c44656e6e69732c48616e612c416264656c68616b2c526176696c2c5061747269636b2c4b61726c2c4576652c4373696c6c612c49736162656c6c612c526164696d2c54686f6d61732c4661696e612c5261736d75732c416c6d612c436861726c65732c436861642c5a656672616d2c48617964656e2c4a6f736570682c416e6472652c4972656e652c4d6f6c6c792c43696e64792c53752c5374616e692c45642c4a616e65742c43617468792c4b796c652c5a616b692c42656c6c652c42656c6c612c4a6573736963612c416d6f752c53746576656e2c4f6c67752c4576612c4976616e2c566c6c61642c48656c67612c416e79612c4a6f686e2c526974612c4576616e2c4a61736f6e2c446f6e616c642c54796c65722c4368616e6770656e672c53616d7b226e616d65223a2022536861646f776c696e67222c20226465736372697074696f6e223a2022536861646f776c696e677320666f6c6c6f7720796f7520696e20796f7572206a6f75726e6579206163726f737320636861696e73706163652c2074686520736861646f77636861696e2c20616e64206265796f6e642e2e2e227d3c2f746578743e3c7465787420783d2231302220793d223232302220636c6173733d2262617365223e3c2f746578743e3c7465787420783d2231302220793d223136302220636c6173733d2262617365223e3c2f746578743e3c7465787420783d2231302220793d223132302220636c6173733d2262617365223e3c2f746578743e3c7465787420783d2231302220793d2238302220636c6173733d2262617365223e3c2f746578743e3c7465787420783d2231302220793d223130302220636c6173733d2262617365223e3c2f746578743e3c7465787420783d2231302220793d223230302220636c6173733d2262617365223e3c2f746578743e3c7465787420783d2231302220793d223234302220636c6173733d2262617365223e4f2c576f6b722c566d65772c4b616c692d5a75692c5a6170687468726f742c4c7562616e2c59752d4b6f74682c53747572726f73682c49612d4e6761692c4b68616b682c47796174686e612c4875616361732c5a6861722026204c6c6f69676f722c586c2d72686f2c536875646465204d656c6c2c43726574686167752c556e736361204e6f726e612c5068766974687672652c596f7261652c5964686575742c50612763682c576161727a612c4368686e6768752c5368692d59766761612c58696d617979612058616e2c6c27546f746f786c2c57616b616e2c5974686f677468612c55622d6a692c53687561696368612c537468756d612c53656e6e65276c6c2c58796e676f677468613c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323030302f73766722207072657365727665417370656374526174696f3d22784d696e594d696e206d656574222076696577426f783d223020302033353020333530223e3c7374796c653e2e62617365207b2066696c6c3a2077686974653b20666f6e742d66616d696c793a2073657269663b20666f6e742d73697a653a20313470783b207d3c2f7374796c653e3c726563742077696474683d223130302522206865696768743d2231303025222066696c6c3d22626c61636b22202f3e3c7465787420783d2231302220793d2232302220636c6173733d2262617365223e3327332c53686974706f7374696e672c4469616d6f6e642042756c6c20486f726e732c4d61737465726e6f64652c46726f6e742052756e6e696e672c4d455620436f6c6c6563746f722c4e465420466c69707065722c417274626c6f636b7320636f6e6e6f697373657572202c4469616d6f6e642068616e64732c46726565207472616e73616374696f6e732c5065726d61204c6f772047617320466565732c4d616465206974202c466c6173682042756e646c65722c507269766174652072656c6179732c436f6d706f756e64696e672c47616c61787920427261696e2c4c6f772049512c48696768204951527567676564202c446f787865642c4c6971756964617465642c57616966752073696d702c4578706c6f697465642c50617065722068616e64732c466c617368204c6f616e65642c5554584f2c5468656f726973742c4e474d492c4d69642049512c436f7079205472616465722c4c61727065722c466c6f6f722073656c6c65722c476f787865642c4f797374657220466f726b65642c436861642042726f2c45786974204c69717569646974792c4861636b65642c4661696c6564205472616e73616374696f6e3c2f746578743e3c7465787420783d2231302220793d223134302220636c6173733d2262617365223e4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f4e6f6e652c54776973746564204d656d7772616974682c48617368656e686f72726f722c536861646f772057656e2c42656172204170652c4d6f6f6e20576f6c662c53697a65204c6f7264652c446567656e647261676f6e2c474d20446f67652c4c697465204c6c616d612c596561726e696e67204e796d70682c4372766163656f757320536e616b652c486f6c6f76797065722c5761696c696e6720496e74656765722c4372616176656e2044656661756c7465722c466c6f6174696e672045796573206f66205365632c42797a616e74696e65205072696e63657373732c4d616e626561727069672c4c617270696e6720546572726f722c542d52656b742c446566692d616e74202c526f707374656e205768616c652c4c6c616d612c456e6368616e746564205275672c426c696e64204f7261636c652c47776569204163636f756e74616e742c4c617a6172757320436f7474656e2c4d656d706f6f6c205772616974682c5065726e6963696f75732070656e6775696e732c53656564205374616c6b65722c536e61726b2c536861646f77737761707065722c526176616765203078786c2c4d61726b6574205261742c44726561642044697020446f672c4178616c6c617878612c467261676d656e74656420436f6269656c6f646f6e2c4a6f6d6f656f6e2c556d6272616d7973746963732c506570626f692c4379706865722047686f756c732c43656e736f722056696e65732c546f726d656e74656420476f72676f6e2c5375736869204b72616b656e2c416c7068612d656174696e67204f6f7a652c426c6174686572696e67204b697262792c52696e6b656279205261696465722c536d6f6c2062616e74656742616c7468617a61722c4e6f476d2c546865204c6172702c546865205275676765642c54686520446f787865642c5468652053696d702c546865204d656d652c54686520546f702062757965722c54686520426f74746f6d2073656c6c65722c546865204d6f6f6e2c546865204f7261636c652c41676f6e792c41706f63616c797073652c41726d61676564646f6e2c42656173742c426568656d6f74682c426c696768742c426c6f6f642c4272616d626c652c4272696d73746f6e652c42726f6f642c43617272696f6e2c43617461636c79736d2c4368696d657269632c436f727073652c436f7272757074696f6e2c44616d6e6174696f6e2c44656174682c44656d6f6e2c446972652c447261676f6e2c44726561642c446f6f6d2c4475736b2c4561676c652c456d70797265616e2c466174652c466f652c47616c652c47686f756c2c476c6f6f6d2c476c7970682c476f6c656d2c4772696d2c486174652c4861766f632c486f6e6f75722c486f72726f722c4879706e6f7469632c4b72616b656e2c4c6f6174682c4d61656c7374726f6d2c4d696e642c4d697261636c652c4d6f726269642c4f626c6976696f6e2c4f6e736c61756768742c5061696e2c50616e64656d6f6e69756d2c50686f656e69782c506c616775652c526167652c526170747572652c52756e652c536b756c6c2c536f6c2c536f756c2c536f72726f772c5370697269742c53746f726d2c54656d706573742c546f726d656e742c56656e6765616e63652c566963746f72792c56697065722c566f727465782c576f652c57726174682c4c6967687427732c5368696d6d6572696e673c2f746578743e3c7465787420783d2231302220793d2234302220636c6173733d2262617365223e6f6620426f72726f77656420536f756c732c6f662053796e746865746963732c6f66205969656c642c206f66205175612744726967612c6f66204c69717569646174696f6e20506f6f6c732c6f6620506f7765722c6f66204769616e74732c6f6620546974616e732c6f6620536b696c6c2c6f662050657266656374696f6e2c6f66204272696c6c69616e63652c6f6620456e6c69676874656e6d656e742c6f662050726f74656374696f6e2c6f6620416e6765722c6f6620526167652c6f6620467572792c6f662056697472696f6c2c6f662074686520466f782c6f6620446574656374696f6e2c6f66205265666c656374696f6e2c6f6620746865205477696e7343726561747572652c466c61772c4f726967696e2c426c6f6f646c696e652c4162696c6974792c4e616d653c2f746578743e3c7465787420783d2231302220793d223138302220636c6173733d2262617365223e4e6f636f696e65722c4d6178696d75732c4e676d692c446567656e2c426c61636b204861742c5768697465204861742c416c6c2d496e2c4170657362616e652c426561727362616e652c4d696e696d6178692c42726964676563726f737365722c4272696467656275726e65722c476f6c646d616e2c42616e652c526f6f742c426974652c536f6e672c526f61722c47726173702c496e737472756d656e742c476c6f772c42656e6465722c536861646f772c576869737065722c53686f75742c47726f776c2c546561722c5065616b2c466f726d2c53756e2c4d6f6f6ea2646970667358221220dbd189aba35b863231d023b4fbec76084f420c4a9376491da02cbc1d5bfe201564736f6c63430008060033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "attributes(uint256)": {
        "details": "Opensea Standards: https://docs.opensea.io/docs/metadata-standards"
      },
      "attributesItem(uint256)": {
        "details": "Opensea Standards: https://docs.opensea.io/docs/metadata-standards",
        "params": {
          "itemId": "A value in propertiesOf[tokenId]"
        }
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "claim(uint256,address)": {
        "params": {
          "tokenId": "Token with `id` to mint. Maps id to individual item ids in ItemIds"
        }
      },
      "contractURI()": {
        "details": "Opensea contract metadata: https://docs.opensea.io/docs/contract-level-metadata"
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "attributes(uint256)": {
        "notice": "Returns the attributes properties of a `tokenId`"
      },
      "attributesItem(uint256)": {
        "notice": "Returns the attributes properties of a single item"
      },
      "claim(uint256,address)": {
        "notice": "Mints Shadowlings to `msg.sender`, cannot mint 0 tokenId"
      },
      "summon(uint256,address)": {
        "notice": "Mints Shadowchain Origin Shadowlings to shadowpakt members, cannot mint 0 tokenId"
      },
      "tokenURI(uint256)": {
        "notice": "Returns an SVG for the provided token id"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3542,
        "contract": "contracts/Shadowling.sol:Shadowling",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 3544,
        "contract": "contracts/Shadowling.sol:Shadowling",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 3548,
        "contract": "contracts/Shadowling.sol:Shadowling",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3552,
        "contract": "contracts/Shadowling.sol:Shadowling",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3556,
        "contract": "contracts/Shadowling.sol:Shadowling",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3562,
        "contract": "contracts/Shadowling.sol:Shadowling",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 4481,
        "contract": "contracts/Shadowling.sol:Shadowling",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 4485,
        "contract": "contracts/Shadowling.sol:Shadowling",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 4488,
        "contract": "contracts/Shadowling.sol:Shadowling",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 4492,
        "contract": "contracts/Shadowling.sol:Shadowling",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 10894,
        "contract": "contracts/Shadowling.sol:Shadowling",
        "label": "propertiesOf",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_struct(ItemIds)9440_storage)"
      },
      {
        "astId": 7,
        "contract": "contracts/Shadowling.sol:Shadowling",
        "label": "_owner",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 114,
        "contract": "contracts/Shadowling.sol:Shadowling",
        "label": "_status",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(ItemIds)9440_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Attributes.ItemIds)",
        "numberOfBytes": "32",
        "value": "t_struct(ItemIds)9440_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(ItemIds)9440_storage": {
        "encoding": "inplace",
        "label": "struct Attributes.ItemIds",
        "members": [
          {
            "astId": 9429,
            "contract": "contracts/Shadowling.sol:Shadowling",
            "label": "creature",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9431,
            "contract": "contracts/Shadowling.sol:Shadowling",
            "label": "flaw",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9433,
            "contract": "contracts/Shadowling.sol:Shadowling",
            "label": "origin",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 9435,
            "contract": "contracts/Shadowling.sol:Shadowling",
            "label": "bloodline",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 9437,
            "contract": "contracts/Shadowling.sol:Shadowling",
            "label": "ability",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 9439,
            "contract": "contracts/Shadowling.sol:Shadowling",
            "label": "name",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}