{
  "address": "0x25749a6FF3cfC87019d4Bc00eD282D5B7BDE4b1d",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "BlockError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CommitError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CurrencyError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "HashError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InitializedError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ListedError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RevealedError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroError",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "currencyId",
          "type": "uint256"
        }
      ],
      "name": "Modified",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "revealHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "random",
          "type": "uint256"
        }
      ],
      "name": "RevealHash",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shadowlingId",
          "type": "uint256"
        }
      ],
      "name": "Sacrificed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "base",
          "type": "uint256"
        }
      ],
      "name": "SetBaseCost",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "currencyId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "cost",
          "type": "uint256"
        }
      ],
      "name": "SetCurrencyCost",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "premium",
          "type": "uint256"
        }
      ],
      "name": "SetPremiumCost",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Taken",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "SHADOWLING_COST",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "revealHash",
          "type": "bytes32"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "hashedKey",
          "type": "bytes32"
        }
      ],
      "name": "commitKey",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "commits",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "commit",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "blockNumber",
          "type": "uint64"
        },
        {
          "internalType": "bool",
          "name": "revealed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "cost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "currencyCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "keyHash",
          "type": "bytes32"
        }
      ],
      "name": "getHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "void_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "shadowling_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currencyId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "revealHash",
          "type": "bytes32"
        }
      ],
      "name": "modify",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "premium",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "revealHash",
          "type": "bytes32"
        }
      ],
      "name": "revealKey",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shadowlingId",
          "type": "uint256"
        }
      ],
      "name": "sacrifice1155",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shadowlingId",
          "type": "uint256"
        }
      ],
      "name": "sacrifice721",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "setBaseCost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currencyId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newCost",
          "type": "uint256"
        }
      ],
      "name": "setCurrencyCost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "setPremiumCost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shadowling",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "takeMany",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "takeSingle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "totalCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "void",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa14cd0f208de761118d9c75e6f80d7f5eab849b67bd07faf626c75b850dda6f1",
  "receipt": {
    "to": null,
    "from": "0xD35700A5121d3e5A85Af7e4720ae9C0012530bF7",
    "contractAddress": "0x25749a6FF3cfC87019d4Bc00eD282D5B7BDE4b1d",
    "transactionIndex": 22,
    "gasUsed": "1673718",
    "logsBloom": "0x
    "blockHash": "0xbac7d6ffad61f75f031ac214e5c51c8a8b50741110f3a27011741d520625ee53",
    "transactionHash": "0xa14cd0f208de761118d9c75e6f80d7f5eab849b67bd07faf626c75b850dda6f1",
    "logs": [
      {
        "transactionIndex": 22,
        "blockNumber": 9321815,
        "transactionHash": "0xa14cd0f208de761118d9c75e6f80d7f5eab849b67bd07faf626c75b850dda6f1",
        "address": "0x25749a6FF3cfC87019d4Bc00eD282D5B7BDE4b1d",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d35700a5121d3e5a85af7e4720ae9c0012530bf7"
        ],
        "data": "0x",
        "logIndex": 57,
        "blockHash": "0xbac7d6ffad61f75f031ac214e5c51c8a8b50741110f3a27011741d520625ee53"
      }
    ],
    "blockNumber": 9321815,
    "cumulativeGasUsed": "4019348",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "7dedd8b6c185c6834f8a5639a74f0b2c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BlockError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CommitError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CurrencyError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HashError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InitializedError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ListedError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RevealedError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"currencyId\",\"type\":\"uint256\"}],\"name\":\"Modified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"revealHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"random\",\"type\":\"uint256\"}],\"name\":\"RevealHash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shadowlingId\",\"type\":\"uint256\"}],\"name\":\"Sacrificed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"}],\"name\":\"SetBaseCost\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"currencyId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"}],\"name\":\"SetCurrencyCost\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"}],\"name\":\"SetPremiumCost\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Taken\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SHADOWLING_COST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"revealHash\",\"type\":\"bytes32\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hashedKey\",\"type\":\"bytes32\"}],\"name\":\"commitKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"commits\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"commit\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"blockNumber\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"revealed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"currencyCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"}],\"name\":\"getHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"void_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"shadowling_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currencyId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"revealHash\",\"type\":\"bytes32\"}],\"name\":\"modify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"premium\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"revealHash\",\"type\":\"bytes32\"}],\"name\":\"revealKey\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shadowlingId\",\"type\":\"uint256\"}],\"name\":\"sacrifice1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shadowlingId\",\"type\":\"uint256\"}],\"name\":\"sacrifice721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setBaseCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currencyId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newCost\",\"type\":\"uint256\"}],\"name\":\"setCurrencyCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setPremiumCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shadowling\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"takeMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"takeSingle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"totalCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"void\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claim(uint256,bytes32)\":{\"params\":{\"revealHash\":\"Unhashed key used in a commit\",\"tokenId\":\"Token with `tokenId` to mint. Maps tokenId to individual item ids in ItemIds\"}},\"commitKey(bytes32)\":{\"details\":\"Miner cannot guess key, user cannot get block hash (thats the idea)\"},\"initialize(address,address)\":{\"details\":\"One time use, these contracts must have their `owner` set to this address\",\"params\":{\"shadowling_\":\"Shadowlings ERC721 contract\",\"void_\":\"Void token contract\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"revealKey(bytes32)\":{\"details\":\"Uses block hash and reveal hash for randomness\"},\"sacrifice1155(address,uint256,uint256,uint256)\":{\"details\":\"Sacrifice function for ERC1155\",\"params\":{\"shadowlingId\":\"If greater than start index, mints shadowling\",\"token\":\"Asset to sacrifice\",\"tokenId\":\"Specific asset to sacrifice\"}},\"sacrifice721(address,uint256,uint256)\":{\"details\":\"Sacrifice function for ERC721, must be approved beforehand\",\"params\":{\"shadowlingId\":\"If greater than start index, mints shadowling\",\"token\":\"Asset to sacrifice\",\"tokenId\":\"Specific asset to sacrifice\"}},\"setBaseCost(address,uint256)\":{\"params\":{\"amount\":\"Amount of void minted per `token` burned\",\"token\":\"Address to update the cost value of\"}},\"setPremiumCost(address,uint256,uint256)\":{\"params\":{\"amount\":\"Extra amount of void tokens received\",\"token\":\"Address to update the cost value of\",\"tokenId\":\"Specific tokenId to delist\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"totalCost(address,uint256)\":{\"returns\":{\"_0\":\"Amount of VOID minted from sacrificing `token` with `tokenId\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"BlockError()\":[{\"notice\":\"Thrown if attempting to reveal in same block or 250 blocks too late\"}],\"CommitError()\":[{\"notice\":\"Thrown if a commit has already been revealed\"}],\"CurrencyError()\":[{\"notice\":\"Thrown on attempting to use incorrect currencyId\"}],\"HashError()\":[{\"notice\":\"Thrown if a hashed revealHash does not match the commit\"}],\"InitializedError()\":[{\"notice\":\"Thrown on attempting to set an already set `void`\"}],\"ListedError()\":[{\"notice\":\"Thrown on attempting to burn a non-whitelisted asset\"}],\"RevealedError()\":[{\"notice\":\"Thrown on revealing a committed hash\"}],\"TokenError()\":[{\"notice\":\"Thrown on attempting to use inccorect tokenId\"}],\"ZeroError()\":[{\"notice\":\"Thrown on passing a zero value as a parameter, you're welcome\"}]},\"events\":{\"Claimed(address,uint256)\":{\"notice\":\"Emitted on burning void tokens to claim a Shadowling\"},\"Modified(address,uint256,uint256)\":{\"notice\":\"Emitted on modifying a Shadowling's attributes\"},\"RevealHash(address,bytes32,uint256)\":{\"notice\":\"Emitted on revealing a committed hash key\"},\"Sacrificed(address,address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Emitted on sacrifice and minting of VOID\"},\"SetBaseCost(address,address,uint256)\":{\"notice\":\"Emitted on upating the base amount of void received from burning an nft\"},\"SetCurrencyCost(uint256,uint256)\":{\"notice\":\"Emitted on setting the price of a currency usage in void tokens\"},\"SetPremiumCost(address,address,uint256,uint256)\":{\"notice\":\"Emitted on updating the premium amount of void received from burning an nft\"},\"Taken(address,address,uint256,uint256)\":{\"notice\":\"Emitted when an owner removes tokens\"}},\"kind\":\"user\",\"methods\":{\"SHADOWLING_COST()\":{\"notice\":\"Void burned for conjuring a Shadowling\"},\"claim(uint256,bytes32)\":{\"notice\":\"Mints Shadowlings to `msg.sender`, cannot mint 0 tokenId\"},\"commitKey(bytes32)\":{\"notice\":\"Commits a hashed key to be revealed later\"},\"commits(address)\":{\"notice\":\"Storage for commits\"},\"cost(address)\":{\"notice\":\"Cost of the NFT with `address`, denominated in VOID tokens\"},\"currencyCost(uint256)\":{\"notice\":\"Maps currencyIds to their respective Void token cost\"},\"getHash(bytes32)\":{\"notice\":\"Keccak256 hash of this contract's address and `keyHash`\"},\"initialize(address,address)\":{\"notice\":\"Sets the void token and shadowling contract addresses\"},\"modify(uint256,uint256,bytes32)\":{\"notice\":\"Modifies a Shadowling using with the `currencyId`, changing its attributes\"},\"premium(address,uint256)\":{\"notice\":\"Additional premium cost of an NFT with `tokenId`, denominated in VOID tokens\"},\"revealKey(bytes32)\":{\"notice\":\"Reveals the key by submitting `revealHash`\"},\"sacrifice1155(address,uint256,uint256,uint256)\":{\"notice\":\"Sacrifices `amount` of `token` with `tokenId` to the Shadowpakt, and receives VOID\"},\"sacrifice721(address,uint256,uint256)\":{\"notice\":\"Sacrifices `token` with `tokenId` to the Shadowpakt, and receives VOID\"},\"setBaseCost(address,uint256)\":{\"notice\":\"Update an `address` of an nft to be whitelisted to receive void on burn\"},\"setCurrencyCost(uint256,uint256)\":{\"notice\":\"Sets the cost of using this currency, denominated in void tokens\"},\"setPremiumCost(address,uint256,uint256)\":{\"notice\":\"Sets an extra amount of void received from burning an nft with `tokenId`\"},\"shadowling()\":{\"notice\":\"Shadowling NFT\"},\"takeMany(address,uint256,uint256)\":{\"notice\":\"Owner function to pull ERC1155 tokens from this contract for nefarious purposes\"},\"takeSingle(address,uint256)\":{\"notice\":\"Owner function to pull ERC721 tokens from this contract for nefarious purposes\"},\"void()\":{\"notice\":\"Void Token to mint\"}},\"notice\":\"Summons Shadowlings from the Shadowchain\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Altar.sol\":\"Altar\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfce1eb6398eae0e2b50251140866a70a3106193f101972c878bba1dbf44929ec\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7de6e64d4a8075e803a972cc77c4c91463e0c3777e4110eacfb5d4a71759b2fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/Altar.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"./interfaces/IVoid.sol\\\";\\r\\nimport \\\"./interfaces/IAltar.sol\\\";\\r\\nimport \\\"./interfaces/IShadowling.sol\\\";\\r\\nimport \\\"./libraries/Currency.sol\\\";\\r\\nimport \\\"./Shadowpakt.sol\\\";\\r\\n\\r\\n/// @notice Summons Shadowlings from the Shadowchain\\r\\ncontract Altar is\\r\\n    IAltar,\\r\\n    Shadowpakt,\\r\\n    Ownable,\\r\\n    ReentrancyGuard,\\r\\n    IERC1155Receiver,\\r\\n    IERC721Receiver\\r\\n{\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    /// @inheritdoc IAltar\\r\\n    uint256 public constant override SHADOWLING_COST = 10000e18;\\r\\n    /// @inheritdoc IAltar\\r\\n    address public override void;\\r\\n    /// @inheritdoc IAltar\\r\\n    address public override shadowling;\\r\\n    /// @inheritdoc IAltar\\r\\n    mapping(address => uint256) public override cost;\\r\\n    /// @inheritdoc IAltar\\r\\n    mapping(uint256 => uint256) public override currencyCost;\\r\\n    /// @inheritdoc IAltar\\r\\n    mapping(address => mapping(uint256 => uint256)) public override premium;\\r\\n\\r\\n    modifier onlyWhitelisted(address token) {\\r\\n        if (cost[token] == 0) revert ListedError();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyShadows(uint256 tokenId) {\\r\\n        if (tokenId < Currency.START_INDEX) revert TokenError();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyCurrency(uint256 currencyId) {\\r\\n        if (currencyId > Currency.START_INDEX - 1 || currencyId < 1)\\r\\n            revert CurrencyError();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // === Initialization ===\\r\\n\\r\\n    /// @inheritdoc IAltar\\r\\n    function initialize(address void_, address shadowling_)\\r\\n        external\\r\\n        override\\r\\n        onlyOwner\\r\\n    {\\r\\n        if (void != address(0)) revert InitializedError();\\r\\n        if (IVoid(void_).owner() == address(this)) void = void_;\\r\\n\\r\\n        if (shadowling != address(0)) revert InitializedError();\\r\\n        if (IVoid(shadowling_).owner() == address(this))\\r\\n            shadowling = shadowling_;\\r\\n    }\\r\\n\\r\\n    // ===== User Actions =====\\r\\n\\r\\n    /// @inheritdoc IAltar\\r\\n    function sacrifice721(\\r\\n        address token,\\r\\n        uint256 tokenId,\\r\\n        uint256 shadowlingId\\r\\n    ) external override nonReentrant onlyWhitelisted(token) {\\r\\n        address caller = _msgSender();\\r\\n        uint256 value = totalCost(token, tokenId);\\r\\n\\r\\n        if (shadowlingId > Currency.START_INDEX) {\\r\\n            uint256 seed = uint256(\\r\\n                keccak256(\\r\\n                    abi.encodePacked(address(this), shadowlingId, tokenId)\\r\\n                )\\r\\n            );\\r\\n            IShadowling(shadowling).claim(shadowlingId, caller, seed);\\r\\n            value -= SHADOWLING_COST;\\r\\n        }\\r\\n\\r\\n        IVoid(void).mint(caller, value);\\r\\n\\r\\n        IERC721(token).safeTransferFrom(\\r\\n            caller,\\r\\n            address(this),\\r\\n            tokenId,\\r\\n            new bytes(0)\\r\\n        );\\r\\n        emit Sacrificed(caller, token, tokenId, 1, value, shadowlingId);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IAltar\\r\\n    function sacrifice1155(\\r\\n        address token,\\r\\n        uint256 tokenId,\\r\\n        uint256 amount,\\r\\n        uint256 shadowlingId\\r\\n    ) external override nonReentrant onlyWhitelisted(token) {\\r\\n        if (amount == 0) revert ZeroError();\\r\\n        address caller = _msgSender();\\r\\n        uint256 value = totalCost(token, tokenId);\\r\\n        if (amount > 1) value = (amount * value) / 1e18; // void token has 18 decimals\\r\\n\\r\\n        if (shadowlingId > Currency.START_INDEX) {\\r\\n            uint256 seed = uint256(\\r\\n                keccak256(\\r\\n                    abi.encodePacked(address(this), shadowlingId, tokenId)\\r\\n                )\\r\\n            );\\r\\n            IShadowling(shadowling).claim(shadowlingId, caller, seed);\\r\\n            value -= SHADOWLING_COST;\\r\\n        }\\r\\n\\r\\n        IVoid(void).mint(caller, value);\\r\\n\\r\\n        IERC1155(token).safeTransferFrom(\\r\\n            caller,\\r\\n            address(this),\\r\\n            tokenId,\\r\\n            amount,\\r\\n            new bytes(0)\\r\\n        );\\r\\n        emit Sacrificed(caller, token, tokenId, amount, value, shadowlingId);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IAltar\\r\\n    function claim(uint256 tokenId, bytes32 revealHash)\\r\\n        external\\r\\n        override\\r\\n        nonReentrant\\r\\n        onlyShadows(tokenId)\\r\\n    {\\r\\n        burn(SHADOWLING_COST);\\r\\n        uint256 seed = revealKey(revealHash);\\r\\n        address caller = _msgSender();\\r\\n        IShadowling(shadowling).claim(tokenId, caller, seed);\\r\\n        emit Claimed(caller, tokenId);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IAltar\\r\\n    function modify(\\r\\n        uint256 tokenId,\\r\\n        uint256 currencyId,\\r\\n        bytes32 revealHash\\r\\n    ) external override nonReentrant onlyShadows(tokenId) {\\r\\n        uint256 value = currencyCost[currencyId];\\r\\n        burn(value); // send the currency back to the shadowchain\\r\\n        uint256 seed = revealKey(revealHash);\\r\\n        IShadowling(shadowling).modify(tokenId, currencyId, seed);\\r\\n        emit Modified(msg.sender, tokenId, currencyId);\\r\\n    }\\r\\n\\r\\n    function burn(uint256 value) private {\\r\\n        if (value == 0) revert ZeroError();\\r\\n        IVoid(void).burn(msg.sender, value);\\r\\n    }\\r\\n\\r\\n    // ===== Owner Actions =====\\r\\n\\r\\n    /// @inheritdoc IAltar\\r\\n    function setBaseCost(address token, uint256 amount)\\r\\n        external\\r\\n        override\\r\\n        onlyOwner\\r\\n    {\\r\\n        cost[token] = amount;\\r\\n        emit SetBaseCost(_msgSender(), token, amount);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IAltar\\r\\n    function setPremiumCost(\\r\\n        address token,\\r\\n        uint256 tokenId,\\r\\n        uint256 amount\\r\\n    ) external override onlyOwner {\\r\\n        premium[token][tokenId] = amount;\\r\\n        emit SetPremiumCost(_msgSender(), token, tokenId, amount);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IAltar\\r\\n    function setCurrencyCost(uint256 currencyId, uint256 newCost)\\r\\n        external\\r\\n        override\\r\\n        onlyOwner\\r\\n        onlyCurrency(currencyId)\\r\\n    {\\r\\n        currencyCost[currencyId] = newCost;\\r\\n        emit SetCurrencyCost(currencyId, newCost);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IAltar\\r\\n    function takeMany(\\r\\n        address token,\\r\\n        uint256 tokenId,\\r\\n        uint256 amount\\r\\n    ) external override onlyOwner nonReentrant {\\r\\n        if (amount == 0) revert ZeroError();\\r\\n        IERC1155(token).safeTransferFrom(\\r\\n            address(this),\\r\\n            owner(),\\r\\n            tokenId,\\r\\n            amount,\\r\\n            new bytes(0)\\r\\n        );\\r\\n        emit Taken(_msgSender(), token, tokenId, amount);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IAltar\\r\\n    function takeSingle(address token, uint256 tokenId)\\r\\n        external\\r\\n        override\\r\\n        onlyOwner\\r\\n        nonReentrant\\r\\n    {\\r\\n        IERC721(token).safeTransferFrom(address(this), owner(), tokenId);\\r\\n        emit Taken(_msgSender(), token, tokenId, 1);\\r\\n    }\\r\\n\\r\\n    // ===== Callbacks =====\\r\\n\\r\\n    function onERC721Received(\\r\\n        address,\\r\\n        address from,\\r\\n        uint256 tokenId,\\r\\n        bytes calldata\\r\\n    ) external override(IERC721Receiver) returns (bytes4) {\\r\\n        return Altar.onERC721Received.selector;\\r\\n    }\\r\\n\\r\\n    function onERC1155Received(\\r\\n        address,\\r\\n        address from,\\r\\n        uint256 tokenId,\\r\\n        uint256 value,\\r\\n        bytes calldata\\r\\n    ) external override(IERC1155Receiver) returns (bytes4) {\\r\\n        return Altar.onERC1155Received.selector;\\r\\n    }\\r\\n\\r\\n    function onERC1155BatchReceived(\\r\\n        address,\\r\\n        address from,\\r\\n        uint256[] calldata ids,\\r\\n        uint256[] calldata values,\\r\\n        bytes calldata\\r\\n    ) external override(IERC1155Receiver) returns (bytes4) {\\r\\n        return Altar.onERC1155BatchReceived.selector;\\r\\n    }\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        return\\r\\n            interfaceId == type(IERC721).interfaceId ||\\r\\n            interfaceId == type(IERC1155).interfaceId;\\r\\n    }\\r\\n\\r\\n    // ===== View =====\\r\\n\\r\\n    /// @inheritdoc IAltar\\r\\n    function totalCost(address token, uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return cost[token] + premium[token][tokenId];\\r\\n    }\\r\\n\\r\\n    constructor() {}\\r\\n}\\r\\n\",\"keccak256\":\"0x9e687a5fc48296d90068b11bdfb538e529b954ec2d8ca7cd73ab746ee7d46343\",\"license\":\"GPL-3.0-or-later\"},\"contracts/Shadowpakt.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./interfaces/IShadowpakt.sol\\\";\\r\\n\\r\\ncontract Shadowpakt is IShadowpakt {\\r\\n    // @dev Storage for commits\\r\\n    struct Commit {\\r\\n        bytes32 commit;\\r\\n        uint64 blockNumber;\\r\\n        bool revealed;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IShadowpakt\\r\\n    mapping(address => Commit) public override commits;\\r\\n\\r\\n    /// @inheritdoc IShadowpakt\\r\\n    function commitKey(bytes32 hashedKey) public override {\\r\\n        commits[msg.sender] = Commit({\\r\\n            commit: hashedKey,\\r\\n            blockNumber: uint64(block.number),\\r\\n            revealed: false\\r\\n        });\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IShadowpakt\\r\\n    function revealKey(bytes32 revealHash) public override returns (uint256) {\\r\\n        Commit storage commit = commits[msg.sender];\\r\\n        if (commit.revealed) revert RevealedError();\\r\\n        commit.revealed = true;\\r\\n        if (getHash(revealHash) != commit.commit) revert HashError();\\r\\n        if (uint64(block.number) <= commit.blockNumber) revert BlockError();\\r\\n        if (uint64(block.number) > commit.blockNumber + 250)\\r\\n            revert BlockError();\\r\\n        bytes32 blockHash = blockhash(commit.blockNumber);\\r\\n        uint256 random = uint256(\\r\\n            keccak256(abi.encodePacked(blockHash, revealHash))\\r\\n        );\\r\\n\\r\\n        emit RevealHash(msg.sender, revealHash, random);\\r\\n        return random;\\r\\n    }\\r\\n\\r\\n    // ===== View =====\\r\\n\\r\\n    /// @inheritdoc IShadowpakt\\r\\n    function getHash(bytes32 keyHash) public view override returns (bytes32) {\\r\\n        return keccak256(abi.encodePacked(address(this), keyHash));\\r\\n    }\\r\\n\\r\\n    constructor() {}\\r\\n}\\r\\n\",\"keccak256\":\"0x8f2fa44ec31fe8b48027c9d96ba8002a1f3241c54f96af6e2f1964c1b099b669\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IAltar.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\npragma solidity 0.8.6;\\r\\n\\r\\ninterface IAltar {\\r\\n    // ===== Events =====\\r\\n\\r\\n    /// @notice Emitted on upating the base amount of void received from burning an nft\\r\\n    event SetBaseCost(\\r\\n        address indexed from,\\r\\n        address indexed token,\\r\\n        uint256 indexed base\\r\\n    );\\r\\n\\r\\n    /// @notice Emitted on updating the premium amount of void received from burning an nft\\r\\n    event SetPremiumCost(\\r\\n        address indexed from,\\r\\n        address indexed token,\\r\\n        uint256 indexed tokenId,\\r\\n        uint256 premium\\r\\n    );\\r\\n\\r\\n    /// @notice Emitted on sacrifice and minting of VOID\\r\\n    event Sacrificed(\\r\\n        address indexed from,\\r\\n        address indexed token,\\r\\n        uint256 indexed tokenId,\\r\\n        uint256 amount,\\r\\n        uint256 value,\\r\\n        uint256 shadowlingId\\r\\n    );\\r\\n\\r\\n    /// @notice Emitted when an owner removes tokens\\r\\n    event Taken(\\r\\n        address indexed from,\\r\\n        address indexed token,\\r\\n        uint256 indexed tokenId,\\r\\n        uint256 amount\\r\\n    );\\r\\n\\r\\n    /// @notice Emitted on modifying a Shadowling's attributes\\r\\n    event Modified(\\r\\n        address indexed from,\\r\\n        uint256 indexed tokenId,\\r\\n        uint256 indexed currencyId\\r\\n    );\\r\\n\\r\\n    /// @notice Emitted on burning void tokens to claim a Shadowling\\r\\n    event Claimed(address indexed from, uint256 indexed tokenId);\\r\\n\\r\\n    /// @notice Emitted on setting the price of a currency usage in void tokens\\r\\n    event SetCurrencyCost(uint256 indexed currencyId, uint256 indexed cost);\\r\\n\\r\\n    // ===== Errors =====\\r\\n\\r\\n    /// @notice Thrown on attempting to burn a non-whitelisted asset\\r\\n    error ListedError();\\r\\n    /// @notice Thrown on passing a zero value as a parameter, you're welcome\\r\\n    error ZeroError();\\r\\n    /// @notice Thrown on attempting to set an already set `void`\\r\\n    error InitializedError();\\r\\n    /// @notice Thrown on attempting to use incorrect currencyId\\r\\n    error CurrencyError();\\r\\n    /// @notice Thrown on attempting to use inccorect tokenId\\r\\n    error TokenError();\\r\\n\\r\\n    // ===== User =====\\r\\n\\r\\n    /// @notice Mints Shadowlings to `msg.sender`, cannot mint 0 tokenId\\r\\n    /// @param  tokenId Token with `tokenId` to mint. Maps tokenId to individual item ids in ItemIds\\r\\n    /// @param  revealHash Unhashed key used in a commit\\r\\n    function claim(uint256 tokenId, bytes32 revealHash) external;\\r\\n\\r\\n    /// @notice Modifies a Shadowling using with the `currencyId`, changing its attributes\\r\\n    function modify(\\r\\n        uint256 tokenId,\\r\\n        uint256 currencyId,\\r\\n        bytes32 revealHash\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Sacrifices `token` with `tokenId` to the Shadowpakt, and receives VOID\\r\\n    /// @dev    Sacrifice function for ERC721, must be approved beforehand\\r\\n    /// @param  token Asset to sacrifice\\r\\n    /// @param  tokenId    Specific asset to sacrifice\\r\\n    /// @param  shadowlingId If greater than start index, mints shadowling\\r\\n    function sacrifice721(\\r\\n        address token,\\r\\n        uint256 tokenId,\\r\\n        uint256 shadowlingId\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Sacrifices `amount` of `token` with `tokenId` to the Shadowpakt, and receives VOID\\r\\n    /// @dev    Sacrifice function for ERC1155\\r\\n    /// @param  token Asset to sacrifice\\r\\n    /// @param  tokenId    Specific asset to sacrifice\\r\\n    /// @param  shadowlingId If greater than start index, mints shadowling\\r\\n    function sacrifice1155(\\r\\n        address token,\\r\\n        uint256 tokenId,\\r\\n        uint256 amount,\\r\\n        uint256 shadowlingId\\r\\n    ) external;\\r\\n\\r\\n    // ===== Owner =====\\r\\n\\r\\n    /// @notice Sets the void token and shadowling contract addresses\\r\\n    /// @dev One time use, these contracts must have their `owner` set to this address\\r\\n    /// @param void_ Void token contract\\r\\n    /// @param shadowling_ Shadowlings ERC721 contract\\r\\n    function initialize(address void_, address shadowling_) external;\\r\\n\\r\\n    /// @notice Sets the cost of using this currency, denominated in void tokens\\r\\n    function setCurrencyCost(uint256 currencyId, uint256 newCost) external;\\r\\n\\r\\n    /// @notice Update an `address` of an nft to be whitelisted to receive void on burn\\r\\n    /// @param  token Address to update the cost value of\\r\\n    /// @param  amount Amount of void minted per `token` burned\\r\\n    function setBaseCost(address token, uint256 amount) external;\\r\\n\\r\\n    /// @notice Sets an extra amount of void received from burning an nft with `tokenId`\\r\\n    /// @param  token Address to update the cost value of\\r\\n    /// @param  tokenId  Specific tokenId to delist\\r\\n    /// @param  amount Extra amount of void tokens received\\r\\n    function setPremiumCost(\\r\\n        address token,\\r\\n        uint256 tokenId,\\r\\n        uint256 amount\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Owner function to pull ERC1155 tokens from this contract for nefarious purposes\\r\\n    function takeMany(\\r\\n        address token,\\r\\n        uint256 tokenId,\\r\\n        uint256 amount\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Owner function to pull ERC721 tokens from this contract for nefarious purposes\\r\\n    function takeSingle(address token, uint256 tokenId) external;\\r\\n\\r\\n    // ===== Constant =====\\r\\n\\r\\n    /// @notice Void burned for conjuring a Shadowling\\r\\n    function SHADOWLING_COST() external view returns (uint256);\\r\\n\\r\\n    // ===== View =====\\r\\n\\r\\n    /// @notice Void Token to mint\\r\\n    function void() external view returns (address);\\r\\n\\r\\n    /// @notice Shadowling NFT\\r\\n    function shadowling() external view returns (address);\\r\\n\\r\\n    /// @notice Cost of the NFT with `address`, denominated in VOID tokens\\r\\n    function cost(address token) external view returns (uint256);\\r\\n\\r\\n    /// @notice Maps currencyIds to their respective Void token cost\\r\\n    function currencyCost(uint256 currencyId) external view returns (uint256);\\r\\n\\r\\n    /// @notice Additional premium cost of an NFT with `tokenId`, denominated in VOID tokens\\r\\n    function premium(address token, uint256 tokenId)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    /// @return Amount of VOID minted from sacrificing `token` with `tokenId\\r\\n    function totalCost(address token, uint256 tokenId)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x2b371d06fcb16060f1bf8cb41222f0b1784749d56a50b3f2bdb335985fd713a3\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IShadowling.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\npragma solidity 0.8.6;\\r\\n\\r\\ninterface IShadowling {\\r\\n    function claim(\\r\\n        uint256 tokenId,\\r\\n        address recipient,\\r\\n        uint256 seed\\r\\n    ) external;\\r\\n\\r\\n    function modify(\\r\\n        uint256 tokenId,\\r\\n        uint256 currencyId,\\r\\n        uint256 seed\\r\\n    ) external;\\r\\n\\r\\n    function propertiesOf(uint256 tokenId)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 creature,\\r\\n            uint256 item,\\r\\n            uint256 origin,\\r\\n            uint256 bloodline,\\r\\n            uint256 eyes,\\r\\n            uint256 name\\r\\n        );\\r\\n}\\r\\n\",\"keccak256\":\"0xae8310eb182155e880ed52228cbddb4e97a49fcfa76a4da349964f3b09f6a4ba\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IShadowpakt.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IShadowpakt {\\r\\n    /// @notice Thrown if attempting to reveal in same block or 250 blocks too late\\r\\n    error BlockError();\\r\\n    /// @notice Thrown if a commit has already been revealed\\r\\n    error CommitError();\\r\\n    /// @notice Thrown if a hashed revealHash does not match the commit\\r\\n    error HashError();\\r\\n    /// @notice Thrown on revealing a committed hash\\r\\n    error RevealedError();\\r\\n\\r\\n    /// @notice Emitted on revealing a committed hash key\\r\\n    event RevealHash(address indexed from, bytes32 revealHash, uint256 random);\\r\\n\\r\\n    /// @notice Storage for commits\\r\\n    function commits(address user)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            bytes32 commit,\\r\\n            uint64 blockNumber,\\r\\n            bool revealed\\r\\n        );\\r\\n\\r\\n    /// @notice Commits a hashed key to be revealed later\\r\\n    /// @dev    Miner cannot guess key, user cannot get block hash (thats the idea)\\r\\n    function commitKey(bytes32 hashedKey) external;\\r\\n\\r\\n    /// @notice Reveals the key by submitting `revealHash`\\r\\n    /// @dev    Uses block hash and reveal hash for randomness\\r\\n    function revealKey(bytes32 revealHash) external returns (uint256);\\r\\n\\r\\n    // ===== View =====\\r\\n\\r\\n    /// @notice Keccak256 hash of this contract's address and `keyHash`\\r\\n    function getHash(bytes32 keyHash) external view returns (bytes32);\\r\\n}\\r\\n\",\"keccak256\":\"0xbf1d2e79b8292a92d8914218699b080660f90738235a1f83431094323570baf4\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IVoid.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\npragma solidity 0.8.6;\\r\\n\\r\\ninterface IVoid {\\r\\n    function mint(address to, uint256 value) external;\\r\\n\\r\\n    function burn(address to, uint256 value) external;\\r\\n\\r\\n    function owner() external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0xb6087dd92974511867202315210826d0bc3d3e046ab07eb65f57f8d3e9a9e423\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/Currency.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"./Random.sol\\\";\\r\\n\\r\\nlibrary Currency {\\r\\n    uint256 internal constant MOD_FOUR = 2;\\r\\n    uint256 internal constant MOD_TWO = 3;\\r\\n    uint256 internal constant ADD_TWO = 4;\\r\\n    uint256 internal constant ADD_FOUR = 5;\\r\\n    uint256 internal constant REMOVE = 6;\\r\\n    uint256 internal constant AUGMENT_TWO = 7;\\r\\n    uint256 internal constant AUGUMENT_FOUR = 8;\\r\\n    uint256 internal constant MEM_COPY = 9;\\r\\n    uint256 internal constant START_INDEX = 10;\\r\\n\\r\\n    error ModifyError();\\r\\n\\r\\n    /// @return Count of attribute Ids > 0\\r\\n    function amountOf(uint256[4] memory params)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 len = params.length;\\r\\n        uint256 count;\\r\\n        for (uint256 i; i < len; i++) {\\r\\n            uint256 value = params[i];\\r\\n            if (value > 0) count++;\\r\\n        }\\r\\n        return count;\\r\\n    }\\r\\n\\r\\n    function slot(string memory prefix, uint256 seed)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return uint256(keccak256(abi.encodePacked(prefix, seed))) % 1000000;\\r\\n    }\\r\\n\\r\\n    /// @notice Modifies an array of values which are the tokenIds for the attributes\\r\\n    /// @param currencyId Type of currency being used\\r\\n    /// @param params Values to manipulate; directly converted to attributes\\r\\n    /// @param seed Pseudorandom value hopefully generated through a commit-reveal scheme\\r\\n    function modify(\\r\\n        uint256 currencyId,\\r\\n        uint256[4] memory params,\\r\\n        uint256 seed\\r\\n    ) internal returns (uint256[4] memory) {\\r\\n        seed = seed % 10000;\\r\\n        uint256 len = params.length;\\r\\n        uint256 count = amountOf(params); // count how many properties are > 0\\r\\n\\r\\n        // adds a property to a one property item\\r\\n        if (currencyId == AUGMENT_TWO) {\\r\\n            if (count != 1) revert ModifyError();\\r\\n            // for each attribute, find the currently set one and modify the one above it\\r\\n            for (uint256 i; i < len; i++) {\\r\\n                uint256 value = params[i];\\r\\n                // if its the last one, set the first slot\\r\\n                if (i == len - 1) params[0] = slot(\\\"SLOT0\\\", seed);\\r\\n                if (value > 0) params[i + 1] = slot(\\\"SLOT1\\\", seed);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // adds a property to a three property item\\r\\n        if (currencyId == AUGUMENT_FOUR) {\\r\\n            if (count != 3) revert ModifyError();\\r\\n            // for each attribute, find the one that is not set, and modify it\\r\\n            for (uint256 i; i < len; i++) {\\r\\n                uint256 value = params[i];\\r\\n                // if its the last one, set the first slot\\r\\n                if (value == 0) params[i] = slot(\\\"SLOT1\\\", seed);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // deletes all properties\\r\\n        if (currencyId == REMOVE) {\\r\\n            // for each attribute, find the one that is set, and set it to 0\\r\\n            for (uint256 i; i < len; i++) {\\r\\n                uint256 value = params[i];\\r\\n                // if its not 0, set it to 0\\r\\n                if (value > 0) params[i] = 0;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // adds up to two properties to a zero property item\\r\\n        if (currencyId == ADD_TWO) {\\r\\n            if (count > 0) revert ModifyError();\\r\\n            if (seed > 5000) params[1] = slot(\\\"SLOT1\\\", seed);\\r\\n            else params[len - 1] = slot(\\\"SLOT2\\\", seed);\\r\\n        }\\r\\n\\r\\n        // adds up to four properties to a zero property item\\r\\n        if (currencyId == ADD_FOUR) {\\r\\n            if (count > 0) revert ModifyError();\\r\\n            for (uint256 i; i < len; i++) {\\r\\n                // if its the last one, set the first slot\\r\\n                if (seed > 9000) params[i] = 0;\\r\\n                else params[i] = slot(\\\"SLOT1\\\", seed);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // modifies up to four properties on a max four property item\\r\\n        if (currencyId == MOD_FOUR) {\\r\\n            if (seed > 9000) params = update(seed, 1);\\r\\n            else if (seed < 500) params = update(seed, 2);\\r\\n            else if (seed < 9000 && seed > 7000) params = update(seed, 3);\\r\\n            else params = update(seed, 4);\\r\\n        }\\r\\n\\r\\n        // modifies up to two properties on a max two property item\\r\\n        if (currencyId == MOD_TWO) {\\r\\n            if (count > 2) revert ModifyError();\\r\\n            if (seed > 5000) params = update(seed, 1);\\r\\n            else params = update(seed, 2);\\r\\n        }\\r\\n\\r\\n        return params;\\r\\n    }\\r\\n\\r\\n    /// @notice Updates an array of values up to `max` using `seed`\\r\\n    function update(uint256 seed, uint256 max)\\r\\n        internal\\r\\n        returns (uint256[4] memory)\\r\\n    {\\r\\n        uint256[4] memory params;\\r\\n        uint256 updated = 1;\\r\\n        params[0] = slot(\\\"SLOT0\\\", seed);\\r\\n        if (updated >= max) return params;\\r\\n        updated++;\\r\\n        params[1] = slot(\\\"SLOT1\\\", seed);\\r\\n        if (updated >= max) return params;\\r\\n        updated++;\\r\\n        params[2] = slot(\\\"SLOT2\\\", seed);\\r\\n        if (updated >= max) return params;\\r\\n        params[3] = slot(\\\"SLOT3\\\", seed);\\r\\n        return params;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x03d9e1a4f7a1e3dc5772d40dce929c06b10b8519e2bb5037056d757b64478dbc\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/Random.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\npragma solidity 0.8.6;\\r\\n\\r\\n/// @notice Is this really random?\\r\\nlibrary Random {\\r\\n    /// @notice Uses a commit-reveal scheme to get randomness from miners and users, separately\\r\\n    /// @param schemeHash Hash of the blockhash at the commit block.number, and their reveal hash\\r\\n    /// @return pseudorandom uint value to use as randomness\\r\\n    function random(string memory schemeHash) internal view returns (uint256) {\\r\\n        uint256 seed = uint256(\\r\\n            keccak256(\\r\\n                abi.encode(\\r\\n                    keccak256(\\r\\n                        abi.encodePacked(\\r\\n                            block.timestamp,\\r\\n                            block.number,\\r\\n                            tx.origin,\\r\\n                            msg.sender,\\r\\n                            gasleft(),\\r\\n                            schemeHash,\\r\\n                            blockhash(block.number),\\r\\n                            blockhash(block.number - 69)\\r\\n                        )\\r\\n                    )\\r\\n                )\\r\\n            )\\r\\n        );\\r\\n        return seed;\\r\\n    }\\r\\n\\r\\n    /// @param input Hash of roll number, tokenId\\r\\n    /// @return pseudorandom number between 1 and 6\\r\\n    function roll(string memory input) internal pure returns (uint256) {\\r\\n        return (uint256(keccak256(abi.encodePacked(input))) % 6) + 1;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xef70d416d15a97777c8cddcf166d9d91b78b7fc04de3aa129ff3a85d1ebe1324\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a33610024565b6001600255610076565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b611c75806100856000396000f3fe608060405234801561001057600080fd5b50600436106101845760003560e01c80637fe49e00116100d9578063ce695ef411610087578063ce695ef414610451578063d654723614610464578063dd5cbc8014610477578063eae6d9bc1461048a578063f23a6e611461049d578063f2fde38b146104bd578063fdd50693146104d057600080fd5b80637fe49e00146103435780638271c5a5146103635780638335d50a146103765780638da5cb5b146103e95780639875f3c714610409578063ac4c25b21461041c578063bc197c811461042f57600080fd5b8063680ae62011610136578063680ae620146102585780636e91f1041461026b578063715018a61461027e57806371c6fe621461028657806375cc86a4146102b15780637671e349146102d15780637b43a8e6146102e257600080fd5b806301ffc9a71461018957806309c12f6e146101b1578063150b7a02146101c657806331d14457146101fe5780633cf5040a14610211578063485cc955146102325780634ca75ae014610245575b600080fd5b61019c610197366004611969565b6104e3565b60405190151581526020015b60405180910390f35b6101c46101bf3660046118e0565b61051a565b005b6101e56101d43660046117c7565b630a85bd0160e11b95945050505050565b6040516001600160e01b031990911681526020016101a8565b6101c461020c366004611993565b6105b3565b61022461021f366004611950565b6106c7565b6040519081526020016101a8565b6101c46102403660046116d0565b610707565b6101c46102533660046119b5565b6108da565b6101c46102663660046118b4565b6109f1565b6101c46102793660046118e0565b610a6a565b6101c4610bba565b6102246102943660046118b4565b600760209081526000928352604080842090915290825290205481565b6102246102bf366004611950565b60066020526000908152604090205481565b61022469021e19e0c9bab240000081565b61031e6102f0366004611696565b600060208190529081526040902080546001909101546001600160401b03811690600160401b900460ff1683565b604080519384526001600160401b0390921660208401521515908201526060016101a8565b610224610351366004611696565b60056020526000908152604090205481565b6101c4610371366004611993565b610bf5565b6101c4610384366004611950565b604080516060810182529182526001600160401b034381166020808501918252600085850181815233825291819052939093209351845551600193909301805492511515600160401b0268ffffffffffffffffff199093169390911692909217179055565b6103f1610c9c565b6040516001600160a01b0390911681526020016101a8565b6102246104173660046118b4565b610cab565b6003546103f1906001600160a01b031681565b6101e561043d366004611709565b63bc197c8160e01b98975050505050505050565b6101c461045f366004611915565b610cec565b610224610472366004611950565b610f8f565b6101c46104853660046118b4565b611107565b6101c46104983660046118e0565b611239565b6101e56104ab366004611839565b63f23a6e6160e01b9695505050505050565b6101c46104cb366004611696565b611493565b6004546103f1906001600160a01b031681565b60006001600160e01b031982166380ac58cd60e01b148061051457506001600160e01b03198216636cdb3d1360e11b145b92915050565b33610523610c9c565b6001600160a01b0316146105525760405162461bcd60e51b815260040161054990611aee565b60405180910390fd5b6001600160a01b0383166000818152600760209081526040808320868452825291829020849055905183815284929133917fd3f07ca0a8e78f29d8f76b6e727b63ae6c34dd8df1a01b76efc61804e5db3124910160405180910390a4505050565b6002805414156105d55760405162461bcd60e51b815260040161054990611b23565b6002805581600a8110156105fc57604051630aaff25360e41b815260040160405180910390fd5b61060f69021e19e0c9bab2400000611533565b600061061a83610f8f565b905060003360048054604051630bce6ea960e31b81529293506001600160a01b031691635e737548916106539189918691889101611b5a565b600060405180830381600087803b15801561066d57600080fd5b505af1158015610681573d6000803e3d6000fd5b50506040518792506001600160a01b03841691507fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a90600090a350506001600255505050565b6040516001600160601b03193060601b16602082015260348101829052600090605401604051602081830303815290604052805190602001209050919050565b33610710610c9c565b6001600160a01b0316146107365760405162461bcd60e51b815260040161054990611aee565b6003546001600160a01b0316156107605760405163d7a1a5ef60e01b815260040160405180910390fd5b306001600160a01b0316826001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156107a357600080fd5b505afa1580156107b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107db91906116b3565b6001600160a01b0316141561080657600380546001600160a01b0319166001600160a01b0384161790555b6004546001600160a01b0316156108305760405163d7a1a5ef60e01b815260040160405180910390fd5b306001600160a01b0316816001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561087357600080fd5b505afa158015610887573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ab91906116b3565b6001600160a01b031614156108d657600480546001600160a01b0319166001600160a01b0383161790555b5050565b6002805414156108fc5760405162461bcd60e51b815260040161054990611b23565b6002805582600a81101561092357604051630aaff25360e41b815260040160405180910390fd5b60008381526006602052604090205461093b81611533565b600061094684610f8f565b6004805460405163044c1dfb60e31b815291820189905260248201889052604482018390529192506001600160a01b0390911690632260efd890606401600060405180830381600087803b15801561099d57600080fd5b505af11580156109b1573d6000803e3d6000fd5b505060405187925088915033907f30251b050c2639441362268961f1e92038b6e0e074621935e198f6f8f3fd759690600090a45050600160025550505050565b336109fa610c9c565b6001600160a01b031614610a205760405162461bcd60e51b815260040161054990611aee565b6001600160a01b0382166000818152600560205260408082208490555183929133917fa292d75692645497fed2391b95e268a055cbd26ffae25f408bd10b7135cea6269190a45050565b33610a73610c9c565b6001600160a01b031614610a995760405162461bcd60e51b815260040161054990611aee565b600280541415610abb5760405162461bcd60e51b815260040161054990611b23565b6002805580610add57604051630597a9ab60e11b815260040160405180910390fd5b826001600160a01b031663f242432a30610af5610c9c565b604080516000815260208101918290526001600160e01b031960e086901b16909152610b2a9291908790879060248101611a90565b600060405180830381600087803b158015610b4457600080fd5b505af1158015610b58573d6000803e3d6000fd5b5050505081836001600160a01b0316610b6e3390565b6001600160a01b03167f28d2cfe87984a8cc7e24396f474935b5cd864f06c0a75315261b1200ab32802184604051610ba891815260200190565b60405180910390a45050600160025550565b33610bc3610c9c565b6001600160a01b031614610be95760405162461bcd60e51b815260040161054990611aee565b610bf360006115b8565b565b33610bfe610c9c565b6001600160a01b031614610c245760405162461bcd60e51b815260040161054990611aee565b81610c316001600a611bfd565b811180610c3e5750600181105b15610c5c57604051632380c6df60e01b815260040160405180910390fd5b60008381526006602052604080822084905551839185917f3f388cecda5117f6ad1658cf6dd06da87f6f6d72492e3f8acc08803792b5772d9190a3505050565b6001546001600160a01b031690565b6001600160a01b038216600081815260076020908152604080832085845282528083205493835260059091528120549091610ce591611b79565b9392505050565b600280541415610d0e5760405162461bcd60e51b815260040161054990611b23565b600280556001600160a01b0384166000908152600560205260409020548490610d4a57604051638182dbb760e01b815260040160405180910390fd5b82610d6857604051630597a9ab60e11b815260040160405180910390fd5b336000610d758787610cab565b90506001851115610da057670de0b6b3a7640000610d938287611bde565b610d9d9190611bbc565b90505b600a841115610e58576000308588604051602001610dc093929190611a2e565b60408051601f1981840301815290829052805160209091012060048054630bce6ea960e31b84529193506001600160a01b0390911691635e73754891610e0c9189918891879101611b5a565b600060405180830381600087803b158015610e2657600080fd5b505af1158015610e3a573d6000803e3d6000fd5b5050505069021e19e0c9bab240000082610e549190611bfd565b9150505b6003546040516340c10f1960e01b81526001600160a01b03909116906340c10f1990610e8a9085908590600401611ad5565b600060405180830381600087803b158015610ea457600080fd5b505af1158015610eb8573d6000803e3d6000fd5b505060408051600081526020810191829052637921219560e11b9091526001600160a01b038a16925063f242432a9150610efd90859030908b908b9060248101611a90565b600060405180830381600087803b158015610f1757600080fd5b505af1158015610f2b573d6000803e3d6000fd5b505060408051888152602081018590529081018790528892506001600160a01b03808b1692508516907fd07a96141be9310b3a0c778f5f250e83196e4dc0d0833b82196bc633ead802789060600160405180910390a4505060016002555050505050565b3360009081526020819052604081206001810154600160401b900460ff1615610fcb5760405163ea1708f760e01b815260040160405180910390fd5b60018101805460ff60401b1916600160401b1790558054610feb846106c7565b146110095760405163061edd1560e11b815260040160405180910390fd5b60018101546001600160401b03908116439091161161103b57604051630fe34f0760e21b815260040160405180910390fd5b6001810154611054906001600160401b031660fa611b91565b6001600160401b0316436001600160401b0316111561108657604051630fe34f0760e21b815260040160405180910390fd5b6001810154604080516001600160401b0390921640602083018190529082018590529060009060600160408051808303601f190181528282528051602091820120888452908301819052925033917fbc016dd1cadeaefcb851af7a0a93532e0023d536894b730801f7bcfe7065bcc2910160405180910390a2949350505050565b33611110610c9c565b6001600160a01b0316146111365760405162461bcd60e51b815260040161054990611aee565b6002805414156111585760405162461bcd60e51b815260040161054990611b23565b600280556001600160a01b0382166342842e0e30611174610c9c565b6040516001600160e01b031960e085901b1681526001600160a01b0392831660048201529116602482015260448101849052606401600060405180830381600087803b1580156111c357600080fd5b505af11580156111d7573d6000803e3d6000fd5b5050505080826001600160a01b03166111ed3390565b6001600160a01b03167f28d2cfe87984a8cc7e24396f474935b5cd864f06c0a75315261b1200ab328021600160405161122891815260200190565b60405180910390a450506001600255565b60028054141561125b5760405162461bcd60e51b815260040161054990611b23565b600280556001600160a01b038316600090815260056020526040902054839061129757604051638182dbb760e01b815260040160405180910390fd5b3360006112a48686610cab565b9050600a84111561135e5760003085876040516020016112c693929190611a2e565b60408051601f1981840301815290829052805160209091012060048054630bce6ea960e31b84529193506001600160a01b0390911691635e737548916113129189918891879101611b5a565b600060405180830381600087803b15801561132c57600080fd5b505af1158015611340573d6000803e3d6000fd5b5050505069021e19e0c9bab24000008261135a9190611bfd565b9150505b6003546040516340c10f1960e01b81526001600160a01b03909116906340c10f19906113909085908590600401611ad5565b600060405180830381600087803b1580156113aa57600080fd5b505af11580156113be573d6000803e3d6000fd5b505060408051600081526020810191829052635c46a7ef60e11b9091526001600160a01b038916925063b88d4fde915061140190859030908a9060248101611a53565b600060405180830381600087803b15801561141b57600080fd5b505af115801561142f573d6000803e3d6000fd5b50506040805160018152602081018590529081018790528792506001600160a01b03808a1692508516907fd07a96141be9310b3a0c778f5f250e83196e4dc0d0833b82196bc633ead802789060600160405180910390a45050600160025550505050565b3361149c610c9c565b6001600160a01b0316146114c25760405162461bcd60e51b815260040161054990611aee565b6001600160a01b0381166115275760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610549565b611530816115b8565b50565b8061155157604051630597a9ab60e11b815260040160405180910390fd5b600354604051632770a7eb60e21b81526001600160a01b0390911690639dc29fac906115839033908590600401611ad5565b600060405180830381600087803b15801561159d57600080fd5b505af11580156115b1573d6000803e3d6000fd5b5050505050565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008083601f84011261161c57600080fd5b5081356001600160401b0381111561163357600080fd5b6020830191508360208260051b850101111561164e57600080fd5b9250929050565b60008083601f84011261166757600080fd5b5081356001600160401b0381111561167e57600080fd5b60208301915083602082850101111561164e57600080fd5b6000602082840312156116a857600080fd5b8135610ce581611c2a565b6000602082840312156116c557600080fd5b8151610ce581611c2a565b600080604083850312156116e357600080fd5b82356116ee81611c2a565b915060208301356116fe81611c2a565b809150509250929050565b60008060008060008060008060a0898b03121561172557600080fd5b883561173081611c2a565b9750602089013561174081611c2a565b965060408901356001600160401b038082111561175c57600080fd5b6117688c838d0161160a565b909850965060608b013591508082111561178157600080fd5b61178d8c838d0161160a565b909650945060808b01359150808211156117a657600080fd5b506117b38b828c01611655565b999c989b5096995094979396929594505050565b6000806000806000608086880312156117df57600080fd5b85356117ea81611c2a565b945060208601356117fa81611c2a565b93506040860135925060608601356001600160401b0381111561181c57600080fd5b61182888828901611655565b969995985093965092949392505050565b60008060008060008060a0878903121561185257600080fd5b863561185d81611c2a565b9550602087013561186d81611c2a565b9450604087013593506060870135925060808701356001600160401b0381111561189657600080fd5b6118a289828a01611655565b979a9699509497509295939492505050565b600080604083850312156118c757600080fd5b82356118d281611c2a565b946020939093013593505050565b6000806000606084860312156118f557600080fd5b833561190081611c2a565b95602085013595506040909401359392505050565b6000806000806080858703121561192b57600080fd5b843561193681611c2a565b966020860135965060408601359560600135945092505050565b60006020828403121561196257600080fd5b5035919050565b60006020828403121561197b57600080fd5b81356001600160e01b031981168114610ce557600080fd5b600080604083850312156119a657600080fd5b50508035926020909101359150565b6000806000606084860312156119ca57600080fd5b505081359360208301359350604090920135919050565b6000815180845260005b81811015611a07576020818501810151868301820152016119eb565b81811115611a19576000602083870101525b50601f01601f19169290920160200192915050565b60609390931b6001600160601b03191683526014830191909152603482015260540190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611a86908301846119e1565b9695505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090611aca908301846119e1565b979650505050505050565b6001600160a01b03929092168252602082015260400190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b9283526001600160a01b03919091166020830152604082015260600190565b60008219821115611b8c57611b8c611c14565b500190565b60006001600160401b03808316818516808303821115611bb357611bb3611c14565b01949350505050565b600082611bd957634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615611bf857611bf8611c14565b500290565b600082821015611c0f57611c0f611c14565b500390565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b038116811461153057600080fdfea2646970667358221220bcac25aa35ffce644590cf7af3169779b2f6534c36f14c39e4b254e553b6e0d864736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101845760003560e01c80637fe49e00116100d9578063ce695ef411610087578063ce695ef414610451578063d654723614610464578063dd5cbc8014610477578063eae6d9bc1461048a578063f23a6e611461049d578063f2fde38b146104bd578063fdd50693146104d057600080fd5b80637fe49e00146103435780638271c5a5146103635780638335d50a146103765780638da5cb5b146103e95780639875f3c714610409578063ac4c25b21461041c578063bc197c811461042f57600080fd5b8063680ae62011610136578063680ae620146102585780636e91f1041461026b578063715018a61461027e57806371c6fe621461028657806375cc86a4146102b15780637671e349146102d15780637b43a8e6146102e257600080fd5b806301ffc9a71461018957806309c12f6e146101b1578063150b7a02146101c657806331d14457146101fe5780633cf5040a14610211578063485cc955146102325780634ca75ae014610245575b600080fd5b61019c610197366004611969565b6104e3565b60405190151581526020015b60405180910390f35b6101c46101bf3660046118e0565b61051a565b005b6101e56101d43660046117c7565b630a85bd0160e11b95945050505050565b6040516001600160e01b031990911681526020016101a8565b6101c461020c366004611993565b6105b3565b61022461021f366004611950565b6106c7565b6040519081526020016101a8565b6101c46102403660046116d0565b610707565b6101c46102533660046119b5565b6108da565b6101c46102663660046118b4565b6109f1565b6101c46102793660046118e0565b610a6a565b6101c4610bba565b6102246102943660046118b4565b600760209081526000928352604080842090915290825290205481565b6102246102bf366004611950565b60066020526000908152604090205481565b61022469021e19e0c9bab240000081565b61031e6102f0366004611696565b600060208190529081526040902080546001909101546001600160401b03811690600160401b900460ff1683565b604080519384526001600160401b0390921660208401521515908201526060016101a8565b610224610351366004611696565b60056020526000908152604090205481565b6101c4610371366004611993565b610bf5565b6101c4610384366004611950565b604080516060810182529182526001600160401b034381166020808501918252600085850181815233825291819052939093209351845551600193909301805492511515600160401b0268ffffffffffffffffff199093169390911692909217179055565b6103f1610c9c565b6040516001600160a01b0390911681526020016101a8565b6102246104173660046118b4565b610cab565b6003546103f1906001600160a01b031681565b6101e561043d366004611709565b63bc197c8160e01b98975050505050505050565b6101c461045f366004611915565b610cec565b610224610472366004611950565b610f8f565b6101c46104853660046118b4565b611107565b6101c46104983660046118e0565b611239565b6101e56104ab366004611839565b63f23a6e6160e01b9695505050505050565b6101c46104cb366004611696565b611493565b6004546103f1906001600160a01b031681565b60006001600160e01b031982166380ac58cd60e01b148061051457506001600160e01b03198216636cdb3d1360e11b145b92915050565b33610523610c9c565b6001600160a01b0316146105525760405162461bcd60e51b815260040161054990611aee565b60405180910390fd5b6001600160a01b0383166000818152600760209081526040808320868452825291829020849055905183815284929133917fd3f07ca0a8e78f29d8f76b6e727b63ae6c34dd8df1a01b76efc61804e5db3124910160405180910390a4505050565b6002805414156105d55760405162461bcd60e51b815260040161054990611b23565b6002805581600a8110156105fc57604051630aaff25360e41b815260040160405180910390fd5b61060f69021e19e0c9bab2400000611533565b600061061a83610f8f565b905060003360048054604051630bce6ea960e31b81529293506001600160a01b031691635e737548916106539189918691889101611b5a565b600060405180830381600087803b15801561066d57600080fd5b505af1158015610681573d6000803e3d6000fd5b50506040518792506001600160a01b03841691507fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a90600090a350506001600255505050565b6040516001600160601b03193060601b16602082015260348101829052600090605401604051602081830303815290604052805190602001209050919050565b33610710610c9c565b6001600160a01b0316146107365760405162461bcd60e51b815260040161054990611aee565b6003546001600160a01b0316156107605760405163d7a1a5ef60e01b815260040160405180910390fd5b306001600160a01b0316826001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156107a357600080fd5b505afa1580156107b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107db91906116b3565b6001600160a01b0316141561080657600380546001600160a01b0319166001600160a01b0384161790555b6004546001600160a01b0316156108305760405163d7a1a5ef60e01b815260040160405180910390fd5b306001600160a01b0316816001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561087357600080fd5b505afa158015610887573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ab91906116b3565b6001600160a01b031614156108d657600480546001600160a01b0319166001600160a01b0383161790555b5050565b6002805414156108fc5760405162461bcd60e51b815260040161054990611b23565b6002805582600a81101561092357604051630aaff25360e41b815260040160405180910390fd5b60008381526006602052604090205461093b81611533565b600061094684610f8f565b6004805460405163044c1dfb60e31b815291820189905260248201889052604482018390529192506001600160a01b0390911690632260efd890606401600060405180830381600087803b15801561099d57600080fd5b505af11580156109b1573d6000803e3d6000fd5b505060405187925088915033907f30251b050c2639441362268961f1e92038b6e0e074621935e198f6f8f3fd759690600090a45050600160025550505050565b336109fa610c9c565b6001600160a01b031614610a205760405162461bcd60e51b815260040161054990611aee565b6001600160a01b0382166000818152600560205260408082208490555183929133917fa292d75692645497fed2391b95e268a055cbd26ffae25f408bd10b7135cea6269190a45050565b33610a73610c9c565b6001600160a01b031614610a995760405162461bcd60e51b815260040161054990611aee565b600280541415610abb5760405162461bcd60e51b815260040161054990611b23565b6002805580610add57604051630597a9ab60e11b815260040160405180910390fd5b826001600160a01b031663f242432a30610af5610c9c565b604080516000815260208101918290526001600160e01b031960e086901b16909152610b2a9291908790879060248101611a90565b600060405180830381600087803b158015610b4457600080fd5b505af1158015610b58573d6000803e3d6000fd5b5050505081836001600160a01b0316610b6e3390565b6001600160a01b03167f28d2cfe87984a8cc7e24396f474935b5cd864f06c0a75315261b1200ab32802184604051610ba891815260200190565b60405180910390a45050600160025550565b33610bc3610c9c565b6001600160a01b031614610be95760405162461bcd60e51b815260040161054990611aee565b610bf360006115b8565b565b33610bfe610c9c565b6001600160a01b031614610c245760405162461bcd60e51b815260040161054990611aee565b81610c316001600a611bfd565b811180610c3e5750600181105b15610c5c57604051632380c6df60e01b815260040160405180910390fd5b60008381526006602052604080822084905551839185917f3f388cecda5117f6ad1658cf6dd06da87f6f6d72492e3f8acc08803792b5772d9190a3505050565b6001546001600160a01b031690565b6001600160a01b038216600081815260076020908152604080832085845282528083205493835260059091528120549091610ce591611b79565b9392505050565b600280541415610d0e5760405162461bcd60e51b815260040161054990611b23565b600280556001600160a01b0384166000908152600560205260409020548490610d4a57604051638182dbb760e01b815260040160405180910390fd5b82610d6857604051630597a9ab60e11b815260040160405180910390fd5b336000610d758787610cab565b90506001851115610da057670de0b6b3a7640000610d938287611bde565b610d9d9190611bbc565b90505b600a841115610e58576000308588604051602001610dc093929190611a2e565b60408051601f1981840301815290829052805160209091012060048054630bce6ea960e31b84529193506001600160a01b0390911691635e73754891610e0c9189918891879101611b5a565b600060405180830381600087803b158015610e2657600080fd5b505af1158015610e3a573d6000803e3d6000fd5b5050505069021e19e0c9bab240000082610e549190611bfd565b9150505b6003546040516340c10f1960e01b81526001600160a01b03909116906340c10f1990610e8a9085908590600401611ad5565b600060405180830381600087803b158015610ea457600080fd5b505af1158015610eb8573d6000803e3d6000fd5b505060408051600081526020810191829052637921219560e11b9091526001600160a01b038a16925063f242432a9150610efd90859030908b908b9060248101611a90565b600060405180830381600087803b158015610f1757600080fd5b505af1158015610f2b573d6000803e3d6000fd5b505060408051888152602081018590529081018790528892506001600160a01b03808b1692508516907fd07a96141be9310b3a0c778f5f250e83196e4dc0d0833b82196bc633ead802789060600160405180910390a4505060016002555050505050565b3360009081526020819052604081206001810154600160401b900460ff1615610fcb5760405163ea1708f760e01b815260040160405180910390fd5b60018101805460ff60401b1916600160401b1790558054610feb846106c7565b146110095760405163061edd1560e11b815260040160405180910390fd5b60018101546001600160401b03908116439091161161103b57604051630fe34f0760e21b815260040160405180910390fd5b6001810154611054906001600160401b031660fa611b91565b6001600160401b0316436001600160401b0316111561108657604051630fe34f0760e21b815260040160405180910390fd5b6001810154604080516001600160401b0390921640602083018190529082018590529060009060600160408051808303601f190181528282528051602091820120888452908301819052925033917fbc016dd1cadeaefcb851af7a0a93532e0023d536894b730801f7bcfe7065bcc2910160405180910390a2949350505050565b33611110610c9c565b6001600160a01b0316146111365760405162461bcd60e51b815260040161054990611aee565b6002805414156111585760405162461bcd60e51b815260040161054990611b23565b600280556001600160a01b0382166342842e0e30611174610c9c565b6040516001600160e01b031960e085901b1681526001600160a01b0392831660048201529116602482015260448101849052606401600060405180830381600087803b1580156111c357600080fd5b505af11580156111d7573d6000803e3d6000fd5b5050505080826001600160a01b03166111ed3390565b6001600160a01b03167f28d2cfe87984a8cc7e24396f474935b5cd864f06c0a75315261b1200ab328021600160405161122891815260200190565b60405180910390a450506001600255565b60028054141561125b5760405162461bcd60e51b815260040161054990611b23565b600280556001600160a01b038316600090815260056020526040902054839061129757604051638182dbb760e01b815260040160405180910390fd5b3360006112a48686610cab565b9050600a84111561135e5760003085876040516020016112c693929190611a2e565b60408051601f1981840301815290829052805160209091012060048054630bce6ea960e31b84529193506001600160a01b0390911691635e737548916113129189918891879101611b5a565b600060405180830381600087803b15801561132c57600080fd5b505af1158015611340573d6000803e3d6000fd5b5050505069021e19e0c9bab24000008261135a9190611bfd565b9150505b6003546040516340c10f1960e01b81526001600160a01b03909116906340c10f19906113909085908590600401611ad5565b600060405180830381600087803b1580156113aa57600080fd5b505af11580156113be573d6000803e3d6000fd5b505060408051600081526020810191829052635c46a7ef60e11b9091526001600160a01b038916925063b88d4fde915061140190859030908a9060248101611a53565b600060405180830381600087803b15801561141b57600080fd5b505af115801561142f573d6000803e3d6000fd5b50506040805160018152602081018590529081018790528792506001600160a01b03808a1692508516907fd07a96141be9310b3a0c778f5f250e83196e4dc0d0833b82196bc633ead802789060600160405180910390a45050600160025550505050565b3361149c610c9c565b6001600160a01b0316146114c25760405162461bcd60e51b815260040161054990611aee565b6001600160a01b0381166115275760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610549565b611530816115b8565b50565b8061155157604051630597a9ab60e11b815260040160405180910390fd5b600354604051632770a7eb60e21b81526001600160a01b0390911690639dc29fac906115839033908590600401611ad5565b600060405180830381600087803b15801561159d57600080fd5b505af11580156115b1573d6000803e3d6000fd5b5050505050565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008083601f84011261161c57600080fd5b5081356001600160401b0381111561163357600080fd5b6020830191508360208260051b850101111561164e57600080fd5b9250929050565b60008083601f84011261166757600080fd5b5081356001600160401b0381111561167e57600080fd5b60208301915083602082850101111561164e57600080fd5b6000602082840312156116a857600080fd5b8135610ce581611c2a565b6000602082840312156116c557600080fd5b8151610ce581611c2a565b600080604083850312156116e357600080fd5b82356116ee81611c2a565b915060208301356116fe81611c2a565b809150509250929050565b60008060008060008060008060a0898b03121561172557600080fd5b883561173081611c2a565b9750602089013561174081611c2a565b965060408901356001600160401b038082111561175c57600080fd5b6117688c838d0161160a565b909850965060608b013591508082111561178157600080fd5b61178d8c838d0161160a565b909650945060808b01359150808211156117a657600080fd5b506117b38b828c01611655565b999c989b5096995094979396929594505050565b6000806000806000608086880312156117df57600080fd5b85356117ea81611c2a565b945060208601356117fa81611c2a565b93506040860135925060608601356001600160401b0381111561181c57600080fd5b61182888828901611655565b969995985093965092949392505050565b60008060008060008060a0878903121561185257600080fd5b863561185d81611c2a565b9550602087013561186d81611c2a565b9450604087013593506060870135925060808701356001600160401b0381111561189657600080fd5b6118a289828a01611655565b979a9699509497509295939492505050565b600080604083850312156118c757600080fd5b82356118d281611c2a565b946020939093013593505050565b6000806000606084860312156118f557600080fd5b833561190081611c2a565b95602085013595506040909401359392505050565b6000806000806080858703121561192b57600080fd5b843561193681611c2a565b966020860135965060408601359560600135945092505050565b60006020828403121561196257600080fd5b5035919050565b60006020828403121561197b57600080fd5b81356001600160e01b031981168114610ce557600080fd5b600080604083850312156119a657600080fd5b50508035926020909101359150565b6000806000606084860312156119ca57600080fd5b505081359360208301359350604090920135919050565b6000815180845260005b81811015611a07576020818501810151868301820152016119eb565b81811115611a19576000602083870101525b50601f01601f19169290920160200192915050565b60609390931b6001600160601b03191683526014830191909152603482015260540190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611a86908301846119e1565b9695505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090611aca908301846119e1565b979650505050505050565b6001600160a01b03929092168252602082015260400190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b9283526001600160a01b03919091166020830152604082015260600190565b60008219821115611b8c57611b8c611c14565b500190565b60006001600160401b03808316818516808303821115611bb357611bb3611c14565b01949350505050565b600082611bd957634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615611bf857611bf8611c14565b500290565b600082821015611c0f57611c0f611c14565b500390565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b038116811461153057600080fdfea2646970667358221220bcac25aa35ffce644590cf7af3169779b2f6534c36f14c39e4b254e553b6e0d864736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claim(uint256,bytes32)": {
        "params": {
          "revealHash": "Unhashed key used in a commit",
          "tokenId": "Token with `tokenId` to mint. Maps tokenId to individual item ids in ItemIds"
        }
      },
      "commitKey(bytes32)": {
        "details": "Miner cannot guess key, user cannot get block hash (thats the idea)"
      },
      "initialize(address,address)": {
        "details": "One time use, these contracts must have their `owner` set to this address",
        "params": {
          "shadowling_": "Shadowlings ERC721 contract",
          "void_": "Void token contract"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "revealKey(bytes32)": {
        "details": "Uses block hash and reveal hash for randomness"
      },
      "sacrifice1155(address,uint256,uint256,uint256)": {
        "details": "Sacrifice function for ERC1155",
        "params": {
          "shadowlingId": "If greater than start index, mints shadowling",
          "token": "Asset to sacrifice",
          "tokenId": "Specific asset to sacrifice"
        }
      },
      "sacrifice721(address,uint256,uint256)": {
        "details": "Sacrifice function for ERC721, must be approved beforehand",
        "params": {
          "shadowlingId": "If greater than start index, mints shadowling",
          "token": "Asset to sacrifice",
          "tokenId": "Specific asset to sacrifice"
        }
      },
      "setBaseCost(address,uint256)": {
        "params": {
          "amount": "Amount of void minted per `token` burned",
          "token": "Address to update the cost value of"
        }
      },
      "setPremiumCost(address,uint256,uint256)": {
        "params": {
          "amount": "Extra amount of void tokens received",
          "token": "Address to update the cost value of",
          "tokenId": "Specific tokenId to delist"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      },
      "totalCost(address,uint256)": {
        "returns": {
          "_0": "Amount of VOID minted from sacrificing `token` with `tokenId"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "BlockError()": [
        {
          "notice": "Thrown if attempting to reveal in same block or 250 blocks too late"
        }
      ],
      "CommitError()": [
        {
          "notice": "Thrown if a commit has already been revealed"
        }
      ],
      "CurrencyError()": [
        {
          "notice": "Thrown on attempting to use incorrect currencyId"
        }
      ],
      "HashError()": [
        {
          "notice": "Thrown if a hashed revealHash does not match the commit"
        }
      ],
      "InitializedError()": [
        {
          "notice": "Thrown on attempting to set an already set `void`"
        }
      ],
      "ListedError()": [
        {
          "notice": "Thrown on attempting to burn a non-whitelisted asset"
        }
      ],
      "RevealedError()": [
        {
          "notice": "Thrown on revealing a committed hash"
        }
      ],
      "TokenError()": [
        {
          "notice": "Thrown on attempting to use inccorect tokenId"
        }
      ],
      "ZeroError()": [
        {
          "notice": "Thrown on passing a zero value as a parameter, you're welcome"
        }
      ]
    },
    "events": {
      "Claimed(address,uint256)": {
        "notice": "Emitted on burning void tokens to claim a Shadowling"
      },
      "Modified(address,uint256,uint256)": {
        "notice": "Emitted on modifying a Shadowling's attributes"
      },
      "RevealHash(address,bytes32,uint256)": {
        "notice": "Emitted on revealing a committed hash key"
      },
      "Sacrificed(address,address,uint256,uint256,uint256,uint256)": {
        "notice": "Emitted on sacrifice and minting of VOID"
      },
      "SetBaseCost(address,address,uint256)": {
        "notice": "Emitted on upating the base amount of void received from burning an nft"
      },
      "SetCurrencyCost(uint256,uint256)": {
        "notice": "Emitted on setting the price of a currency usage in void tokens"
      },
      "SetPremiumCost(address,address,uint256,uint256)": {
        "notice": "Emitted on updating the premium amount of void received from burning an nft"
      },
      "Taken(address,address,uint256,uint256)": {
        "notice": "Emitted when an owner removes tokens"
      }
    },
    "kind": "user",
    "methods": {
      "SHADOWLING_COST()": {
        "notice": "Void burned for conjuring a Shadowling"
      },
      "claim(uint256,bytes32)": {
        "notice": "Mints Shadowlings to `msg.sender`, cannot mint 0 tokenId"
      },
      "commitKey(bytes32)": {
        "notice": "Commits a hashed key to be revealed later"
      },
      "commits(address)": {
        "notice": "Storage for commits"
      },
      "cost(address)": {
        "notice": "Cost of the NFT with `address`, denominated in VOID tokens"
      },
      "currencyCost(uint256)": {
        "notice": "Maps currencyIds to their respective Void token cost"
      },
      "getHash(bytes32)": {
        "notice": "Keccak256 hash of this contract's address and `keyHash`"
      },
      "initialize(address,address)": {
        "notice": "Sets the void token and shadowling contract addresses"
      },
      "modify(uint256,uint256,bytes32)": {
        "notice": "Modifies a Shadowling using with the `currencyId`, changing its attributes"
      },
      "premium(address,uint256)": {
        "notice": "Additional premium cost of an NFT with `tokenId`, denominated in VOID tokens"
      },
      "revealKey(bytes32)": {
        "notice": "Reveals the key by submitting `revealHash`"
      },
      "sacrifice1155(address,uint256,uint256,uint256)": {
        "notice": "Sacrifices `amount` of `token` with `tokenId` to the Shadowpakt, and receives VOID"
      },
      "sacrifice721(address,uint256,uint256)": {
        "notice": "Sacrifices `token` with `tokenId` to the Shadowpakt, and receives VOID"
      },
      "setBaseCost(address,uint256)": {
        "notice": "Update an `address` of an nft to be whitelisted to receive void on burn"
      },
      "setCurrencyCost(uint256,uint256)": {
        "notice": "Sets the cost of using this currency, denominated in void tokens"
      },
      "setPremiumCost(address,uint256,uint256)": {
        "notice": "Sets an extra amount of void received from burning an nft with `tokenId`"
      },
      "shadowling()": {
        "notice": "Shadowling NFT"
      },
      "takeMany(address,uint256,uint256)": {
        "notice": "Owner function to pull ERC1155 tokens from this contract for nefarious purposes"
      },
      "takeSingle(address,uint256)": {
        "notice": "Owner function to pull ERC721 tokens from this contract for nefarious purposes"
      },
      "void()": {
        "notice": "Void Token to mint"
      }
    },
    "notice": "Summons Shadowlings from the Shadowchain",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7575,
        "contract": "contracts/Altar.sol:Altar",
        "label": "commits",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_struct(Commit)7568_storage)"
      },
      {
        "astId": 7,
        "contract": "contracts/Altar.sol:Altar",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 114,
        "contract": "contracts/Altar.sol:Altar",
        "label": "_status",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 6606,
        "contract": "contracts/Altar.sol:Altar",
        "label": "void",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 6610,
        "contract": "contracts/Altar.sol:Altar",
        "label": "shadowling",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 6616,
        "contract": "contracts/Altar.sol:Altar",
        "label": "cost",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6622,
        "contract": "contracts/Altar.sol:Altar",
        "label": "currencyCost",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 6630,
        "contract": "contracts/Altar.sol:Altar",
        "label": "premium",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_struct(Commit)7568_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Shadowpakt.Commit)",
        "numberOfBytes": "32",
        "value": "t_struct(Commit)7568_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Commit)7568_storage": {
        "encoding": "inplace",
        "label": "struct Shadowpakt.Commit",
        "members": [
          {
            "astId": 7563,
            "contract": "contracts/Altar.sol:Altar",
            "label": "commit",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 7565,
            "contract": "contracts/Altar.sol:Altar",
            "label": "blockNumber",
            "offset": 0,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 7567,
            "contract": "contracts/Altar.sol:Altar",
            "label": "revealed",
            "offset": 8,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}